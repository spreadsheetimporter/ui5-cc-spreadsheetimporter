{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UI5 Spreadsheet Upload Component","text":"<p>This component provides functionality for the bulk upload of data and the quick creation of records, with support for standard identification. Its use is independent of the backend, OData version, and Fiori scenario. Importing data is achieved by reading Spreadsheet files and utilizing standard digital APIs. The component does not submit the file itself but instead submits the data extracted from the Spreadsheet files. Its integration is designed to be as simple as possible, ideally requiring no configuration.</p> <p>Get Started Live Demo</p> <p>For information about the currently supported OData and UI5 Versions, click here. A quick integration tutorial for this component is available on YouTube here.</p> <p>Commercial License Required</p> <p>This component is licensed under the SpreadsheetImporter Commercial License since version 2.0.0. For details, see LICENSE.md. The version 1.x is licensed under the Apache License 2.0 and remains free of charge but no major updates will be provided.</p>"},{"location":"#feature-overview","title":"Feature Overview","text":"<ul> <li>Supports upload from List Report/Object Page in Fiori Elements with or without draft</li> <li>Usable across all Fiori scenarios (Fiori Elements, Freestyle, OpenUI5, V2/V4)</li> <li>Includes several frontend checks</li> <li>Capability to download a pre-generated Spreadsheet template</li> <li>Extension Points for uploading to App or sending to the backend</li> <li>Supports multiversion namespace in Fiori Launchpad</li> <li>Provides multilanguage support (DE, EN, ES, FR, HI, IT, JA, ZH)</li> <li>Option to send to Backend in batch or single requests (batch size configurable)</li> <li>Standalone Mode (upload to app without sending to backend)</li> <li>Functionality to preview uploaded data</li> <li>Automatic draft activation</li> <li>Button control for simplified integration</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For discussions about the suitability of the component for your use case, you can schedule an appointment here free of charge.</p> <p>If you encounter implementation issues or bugs, you can open an issue here. For urgent assistance or special requirements, please schedule an appointment here at a fixed rate.</p>"},{"location":"#live-demo","title":"Live Demo","text":"<p>You can try this component live at: https://livedemo.spreadsheet-importer.com/</p> <p>The demo app uses OData V4, UI5 version 1.136, and a CAP backend. Data is reset every hour on the hour.</p>"},{"location":"#blogs","title":"Blogs","text":"<p>Find a selection of blog posts about this control:</p> <ul> <li>Simplifying Spreadsheet Upload in Fiori Elements: The Open Source and Easy-to-Use UI5 Custom Control</li> <li>Create a UI5 Custom Library with Versioning Using a Multi-Version Namespace</li> <li>Automating UI5 Testing with GitHub Actions and wdi5 in Multiple Scenarios</li> <li>Load Data from a Spreadsheet File in UI5 and Display the Data in a Table with this Open Source Component</li> </ul>"},{"location":"pages/APIReference/","title":"API Reference","text":""},{"location":"pages/APIReference/#class-spreadsheetimporter-component","title":"class spreadsheetimporter Component","text":""},{"location":"pages/APIReference/#overview","title":"Overview","text":"<p>The <code>spreadsheetimporter</code> component provides a way to import data from a spreadsheet into a table in the UI Builder application.</p>"},{"location":"pages/APIReference/#constructor","title":"Constructor","text":"<pre><code>createComponent({\n    usage: \"spreadsheetImporter\",\n    async: true,\n    componentData: {\n        context: this,\n        tableId?,\n        ...OTHER_OPTIONS\n      },\n});\n</code></pre>"},{"location":"pages/APIReference/#properties","title":"Properties","text":"<p>more info see Configuration</p>"},{"location":"pages/APIReference/#events","title":"Events","text":"<p>more info see Events</p> Event Description <code>preFileProcessing</code> Execute custom logic before processing the spreadsheet file starts <code>checkBeforeRead</code> Check data before it is uploaded to the UI5 <code>changeBeforeCreate</code> Change data before it is sent to the backend <code>requestCompleted</code> Event when the request is completed <code>uploadButtonPress</code> Fired when the <code>Upload</code> button is pressed, possible to prevent data from being sent to the backend"},{"location":"pages/APIReference/#methods","title":"Methods","text":""},{"location":"pages/APIReference/#openspreadsheetuploaddialog","title":"openSpreadsheetUploadDialog","text":"<p>Opens the spreadsheet upload dialog.</p>"},{"location":"pages/APIReference/#usage","title":"Usage","text":"<p>You can use this method to open the spreadsheet upload dialog after creating the component. Optionally, you can pass the <code>options</code> object to customize the dialog.</p>"},{"location":"pages/APIReference/#sample-code","title":"Sample Code","text":"<pre><code>const options = {\n  context: this,\n  tableId: 'ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Shipping::LineItem-innerTable'\n};\nthis.spreadsheetUploadTableShipping = await this.editFlow.getView().getController().getAppComponent().createComponent({\n  usage: 'spreadsheetImporter',\n  async: true\n});\nthis.spreadsheetUploadTableShipping.setBatchSize(500);\nthis.spreadsheetUploadTableShipping.openSpreadsheetUploadDialog(options);\n</code></pre>"},{"location":"pages/APIReference/#openwizard","title":"openWizard","text":"<p>Opens the wizard-based spreadsheet import dialog with guided step-by-step process.</p> <p>** Available from version <code>2.2.0</code> **</p>"},{"location":"pages/APIReference/#usage_1","title":"Usage","text":"<p>You can use this method to open the wizard dialog after creating the component with <code>useImportWizard: true</code>. Optionally, you can pass the <code>options</code> object to override component configuration settings.</p>"},{"location":"pages/APIReference/#parameters","title":"Parameters","text":"<ul> <li><code>options</code> (optional): Configuration object to override component settings</li> <li>Type: <code>ComponentData</code></li> <li>All configuration options are supported</li> <li>Settings passed here will override the component's initial configuration</li> </ul>"},{"location":"pages/APIReference/#return-value","title":"Return Value","text":"<ul> <li>Returns: <code>Promise&lt;object&gt;</code></li> <li>Resolves with result object containing:<ul> <li><code>canceled</code>: Boolean indicating if wizard was canceled</li> <li><code>coordinates</code>: String with final coordinates used</li> <li><code>workbook</code>: XLSX workbook object (if successful)</li> <li><code>sheetName</code>: String with sheet name used</li> <li><code>sheetData</code>: Array with imported data</li> </ul> </li> </ul>"},{"location":"pages/APIReference/#sample-code_1","title":"Sample Code","text":"<p>Basic Usage:</p> <pre><code>// Open wizard with component's default settings\nthis.spreadsheetWizard.openWizard().then(function (result) {\n  if (!result.canceled) {\n    MessageToast.show('Import completed successfully!');\n  }\n});\n</code></pre> <p>With Options:</p> <pre><code>const options = {\n  strict: false, // Allow continuing with errors\n  mandatoryFields: ['ID', 'Name'], // Override mandatory fields\n  batchSize: 100, // Override batch size\n  showBackendErrorMessages: true, // Show detailed backend errors\n  continueOnError: true // Continue processing despite errors\n};\n\nthis.spreadsheetWizard\n  .openWizard(options)\n  .then(function (result) {\n    if (!result.canceled) {\n      console.log('Import completed:', result);\n      MessageToast.show(`Imported ${result.sheetData.length} records`);\n    } else {\n      MessageToast.show('Import was canceled by user');\n    }\n  })\n  .catch(function (error) {\n    MessageToast.show('Error: ' + error.message);\n  });\n</code></pre> <p>Component Creation with Wizard:</p> <pre><code>// Create component with wizard enabled\nthis.spreadsheetWizard = await this.getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      tableId: 'myTableId',\n      useImportWizard: true, // Enable wizard mode\n      debug: true\n    }\n  });\n\n// Open wizard with runtime options\nconst wizardOptions = {\n  columns: ['OrderNo', 'buyer', 'email'],\n  fieldMatchType: 'labelTypeBrackets',\n  decimalSeparator: ','\n};\n\nthis.spreadsheetWizard.openWizard(wizardOptions);\n</code></pre> <p>ComponentContainer Usage:</p> <pre><code>&lt;core:ComponentContainer\n  id=\"wizardSpreadsheetImporter\"\n  usage=\"spreadsheetImporter\"\n  settings=\"{\n        useImportWizard: true,\n        debug: true,\n        createActiveEntity: true\n    }\"\n/&gt;\n</code></pre> <pre><code>// In controller\nonOpenWizard: function() {\n    var oComponent = this.byId(\"wizardSpreadsheetImporter\").getComponentInstance();\n\n    const options = {\n        strict: true,\n        mandatoryFields: [\"OrderNo\", \"buyer\"]\n    };\n\n    oComponent.openWizard(options).then(function(result) {\n        // Handle result\n    });\n}\n</code></pre> <p>For more details about the wizard, see Wizard Documentation.</p>"},{"location":"pages/APIReference/#addarraytomessages","title":"addArrayToMessages","text":"<p>Adds an array of messages inside a event.</p>"},{"location":"pages/APIReference/#usage_2","title":"Usage","text":"<p>You can use this method to add an array of messages to the event. The messages will be displayed in the error dialog after the execution of the event.</p>"},{"location":"pages/APIReference/#sample-code_2","title":"Sample Code","text":"<pre><code>this.spreadsheetUpload.attachCheckBeforeRead(function (event) {\n  // example\n  const sheetdata = event.getParameter('sheetData');\n  let errorArray = [];\n  for (const [index, row] of sheetData.entries()) {\n    // Check for invalid price\n    for (const key in row) {\n      if (key.endsWith('[price]') &amp;&amp; row[key].rawValue &gt; 100) {\n        const error = {\n          title: 'Price too high (max 100)',\n          row: index + 2,\n          group: true,\n          rawValue: row[key].rawValue,\n          ui5type: 'Error'\n        };\n        errorArray.push(error);\n      }\n    }\n  }\n  event.getSource().addArrayToMessages(errorArray);\n}, this);\n</code></pre>"},{"location":"pages/APIReference/#getmessages","title":"getMessages","text":"<p>Returns the messages array.</p>"},{"location":"pages/APIReference/#usage_3","title":"Usage","text":"<p>You can use this method to get the messages array from the message handler.</p>"},{"location":"pages/APIReference/#setarraymessages","title":"setArrayMessages","text":"<p>Sets the messages array, replacing any existing messages.</p>"},{"location":"pages/APIReference/#usage_4","title":"Usage","text":"<p>You can use this method to completely replace the current messages array with a new one. Unlike <code>addArrayToMessages</code> which appends messages, this method will overwrite any existing messages.</p>"},{"location":"pages/APIReference/#sample-code_3","title":"Sample Code","text":"<pre><code>this.spreadsheetUpload.attachCheckBeforeRead(function (event) {\n  // Create a new messages array\n  let messagesArray = [];\n\n  // Add validation messages based on your custom logic\n  const sheetdata = event.getParameter('sheetData');\n  for (const [index, row] of sheetData.entries()) {\n    if (someValidationCondition) {\n      const message = {\n        title: 'Validation failed',\n        row: index + 2,\n        group: true,\n        ui5type: 'Error'\n      };\n      messagesArray.push(message);\n    }\n  }\n\n  // Replace all existing messages with the new array\n  event.getSource().setArrayMessages(messagesArray);\n}, this);\n</code></pre>"},{"location":"pages/Button/","title":"Button Control","text":""},{"location":"pages/Button/#button-in-component","title":"Button in Component","text":"<p>The usage of the UIComponent enables the possibility to return a button with the usage of a ComponentContainer. This has the big advantage that no separate dependency has to be installed, and a button for spreadsheet upload can be integrated very easily.</p> <p>You can also use the button in Fiori Elements applications within a section of an object page (see Including Reuse Components on an Object Page).</p>"},{"location":"pages/Button/#requirements","title":"Requirements","text":"<ul> <li>Node.js Version v16.18.0, v18.12.0, or higher</li> <li>npm Version v8.0.0 or higher</li> <li>UI5 CLI v3.0.0 or higher</li> </ul>"},{"location":"pages/Button/#getting-started","title":"Getting started","text":"<p>1. Install from npm</p> <pre><code>npm install ui5-cc-spreadsheetimporter\n</code></pre> <p>2. Add <code>resourceRoots</code> to your <code>manifest.json</code> under <code>sap.ui5</code></p> <p>\u26a0\ufe0f You must always keep your <code>ui5-cc-spreadsheetimporter</code> and button version up to date here when updating the module.</p> <p>Resource Roots Path</p> <p>The <code>resourceRoots</code> path \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\" changed from version 0.34.0 to lowercase. Please make sure to use the correct path.</p> <pre><code>\"resourceRoots\": {\n    \"cc.spreadsheetimporter.v2_3_0\": \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\"\n}\n</code></pre> <p>3. Add <code>components</code> to your <code>manifest.json</code> under <code>sap.ui5.dependencies</code></p> <p>This is optional and preloads the component on startup of the application.</p> <p>\u26a0\ufe0f You must always keep your <code>ui5-cc-spreadsheetimporter</code> version up to date here when updating the module.</p> <pre><code>\"dependencies\": {\n  \"minUI5Version\": \"1.108.42\",\n  \"libs\": {\n    \"sap.m\": {},\n    \"sap.ui.core\": {},\n    \"sap.f\": {},\n    \"sap.ui.table\": {}\n  },\n  \"components\": {\n    \"cc.spreadsheetimporter.v2_3_0\": {}\n  }\n}\n</code></pre> <p>4. Add <code>componentUsages</code> to your <code>manifest.json</code> under <code>sap.ui5</code></p> <p>\u26a0\ufe0f You must always keep your <code>ui5-cc-spreadsheetimporter</code> version up to date here when updating the module.</p> <pre><code>\"componentUsages\": {\n    \"spreadsheetImporter\": {\n        \"name\": \"cc.spreadsheetimporter.v2_3_0\"\n    }\n}\n</code></pre> <p>5. Add the namespace <code>core</code> to your XML View</p> <pre><code>&lt;mvc:View\n  controllerName=\"ui.v2.ordersv2freestylenondraft.controller.UploadToTable\"\n  xmlns=\"sap.m\"\n  xmlns:semantic=\"sap.f.semantic\"\n  xmlns:mvc=\"sap.ui.core.mvc\"\n  xmlns:core=\"sap.ui.core\"\n&gt;\n  ...\n&lt;/mvc:View&gt;\n</code></pre> <p>6. Add the <code>core:ComponentContainer</code> control to your view.</p> <pre><code>&lt;core:ComponentContainer width=\"100%\" usage=\"spreadsheetImporter\" propagateModel=\"true\" async=\"true\" /&gt;\n</code></pre>"},{"location":"pages/Button/#define-configuration-options","title":"Define Configuration Options","text":"<p>You can set configuration options for the spreadsheet importer in the <code>settings</code> property of the <code>core:ComponentContainer</code> control. For special configuration options for the <code>ComponantContainer</code>, see Configuration.</p> <pre><code>&lt;core:ComponentContainer\n  width=\"100%\"\n  usage=\"spreadsheetImporter\"\n  propagateModel=\"true\"\n  async=\"true\"\n  settings=\"{\n  standalone:true,\n  columns: ['product_ID', 'username'],\n  componentContainerData:{\n    uploadButtonPress:'uploadButtonPress',\n    buttonText:'Excel Upload'\n    }\n  }\"\n/&gt;\n</code></pre>"},{"location":"pages/Button/#example-app","title":"Example App","text":""},{"location":"pages/Button/#freestyle-odata-v2","title":"Freestyle OData V2","text":"<p>XML View: Detail.view.xml Controller: Detail.controller.js</p>"},{"location":"pages/Button/#freestyle-odata-v2-standalone","title":"Freestyle OData V2 Standalone","text":"<p>XML View: UploadToTable.view.xml Controller: UploadToTable.controller.js</p>"},{"location":"pages/Button/#including-reuse-components-on-an-object-page","title":"Including Reuse Components on an Object Page","text":"<p>You can also use the button in Fiori Elements applications within a section of an object page. You can define this in the <code>manifest.json</code> under <code>sap.ui.generic.app</code> in the <code>pages</code> property.</p> <p>The configuration is documented in the UI5 documentation.</p> <p>A sample configuration can be found in the manifest.json of the OData V4 Fiori Elements app</p> <pre><code>\"body\": {\n  \"sections\": {\n    \"customSectionReuse\": {\n      \"title\": \"Spreadsheet Upload\",\n      \"embeddedComponent\": {\n        \"name\": \"cc.spreadsheetimporter.v2_3_0\",\n        \"settings\": {\n          \"tableId\": \"ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Items::LineItem-innerTable\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pages/Button/#screenshot","title":"Screenshot","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/","title":"Changelogs","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#210-2025-04-28","title":"2.1.0 (2025-04-28)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features","title":"Features","text":"<ul> <li>add new api setArrayMessages (#744) (7396644)</li> <li>Add new config skipEmptyHeadersCheck and readSheetCoordinates features (#741) (3380cb0)</li> <li>integrate the cds spreadsheetimporter plugin (#742) (43add6a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>check configuration options if valid (#737) (bb3a20b)</li> <li>event handler prefixed with dot in xml views (#738) (9f04a83)</li> <li>handle process if object was not found in backend (#735) (8aed7e9)</li> <li>return error if wrong table type is specified (#739) (83c80dd)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#230-2025-07-04","title":"2.3.0 (2025-07-04)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_1","title":"Features","text":"<ul> <li>introduce pasting data or files to upload dialog (#778) (10413df)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>add dragdrop to wizard (#777) (d2e2244)</li> <li>add template download button to wizard (#775) (4f1277a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#220-2025-07-02","title":"2.2.0 (2025-07-02)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_2","title":"Features","text":"<ul> <li>add indicator if data is inserted or updated (#772) (df9fc49)</li> <li>new language korean and fixes missing i18n strings (#756) (47ad3be)</li> <li>wizard to import spreadsheet files (#759) (03f86ee)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>fail if object was not found in backend (#771) (d73e57a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#200-2025-03-28","title":"2.0.0 (2025-03-28)","text":"<p>This release only changes the license to the SpreadsheetImporter Commercial License. No other changes to the component are made.</p>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>Switch to commercial license for version 2.0.0+</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#miscellaneous-chores","title":"Miscellaneous Chores","text":"<ul> <li>Switch to commercial license for version 2.0.0+ (88fe938)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#173-2025-02-11","title":"1.7.3 (2025-02-11)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>check for errors when fetching objects for update (#714) (1bac0be)</li> <li>support of columns as string array in deep export (#712) (e15a9a9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#172-2025-02-10","title":"1.7.2 (2025-02-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>update: dont check draft state if not available (#709) (e0f6f24)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#171-2025-02-09","title":"1.7.1 (2025-02-09)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>hotfix for wrong namespace (#706) (a2861ae)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#170-2025-02-07","title":"1.7.0 (2025-02-07)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_3","title":"Features","text":"<ul> <li>update records (V4 only) (#673) (6fe3c90)</li> <li>new config option <code>action</code> to specify the action to be performed (<code>CREATE</code>, <code>UPDATE</code>) (#673) (6fe3c90)</li> <li>Parser checking for <code>Edm.Guid</code> (#673) (6fe3c90)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>download fails with empty <code>$expand</code> parameter (#703) (0a930c2)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#160-2024-12-17","title":"1.6.0 (2024-12-17)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_4","title":"Features","text":"<ul> <li>have new property <code>IsActiveEntity</code> status in export (#691) (fdefc5a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>show download template button in standalone mode when spreadsheetTemplateFile is used (51129c3)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#152-2024-12-12","title":"1.5.2 (2024-12-12)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>the <code>resize</code> icon of dialog caused chrome to crash (#686) (9729a98)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#151-2024-12-12","title":"1.5.1 (2024-12-12)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>column names did not parse if cell type is date (#677) (100771e)</li> <li>resolve infinite loop in entity relationships navigation properties (#683) (1b29c8a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#150-2024-12-06","title":"1.5.0 (2024-12-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_5","title":"Features","text":"<ul> <li>add icon option to xml view button (#664) (5fa1c5c)</li> <li>Deep Spreadsheet Export (#657) (7258af7)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>in V4 Freestyle MetaModel was not found (#663) (7dee888)</li> <li>label not found if no annotations available (#670) (3801d1a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#143-2024-11-12","title":"1.4.3 (2024-11-12)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>label could be undefined and throws error(#649) (4b9fa59)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#142-2024-10-18","title":"1.4.2 (2024-10-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>preview did not show all columns (#638) (eca1534)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#141-2024-09-21","title":"1.4.1 (2024-09-21)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>add <code>nl</code> language to manifest (#633) (c9ea8ab)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#140-2024-09-18","title":"1.4.0 (2024-09-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_6","title":"Features","text":"<ul> <li>new language dutch (LLM translated) (#631) (f4a7fae)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#130-2024-09-16","title":"1.3.0 (2024-09-16)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_7","title":"Features","text":"<ul> <li>new parameter <code>bindingCustom</code> (#628) (935ea47)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>in V4 context check if it is possible to execute with <code>editFlow</code> (#630) (c5701a9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#122-2024-09-10","title":"1.2.2 (2024-09-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>update <code>SheetJS</code> dependency to 0.20.3 (#626) (58000d7)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#121-2024-09-05","title":"1.2.1 (2024-09-05)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>get odata version from binding instead of context (#618) (cf1f3a4)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#120-2024-08-14","title":"1.2.0 (2024-08-14)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_8","title":"Features","text":"<ul> <li>new event <code>preFileProcessing</code> (#612) (966c3b1)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li><code>Edm.DateTimeOffset</code> parsing with and without precision (#603) (6649d53)</li> <li>force refresh only for v2 and when refresh failed (#596) (6f27348)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#111-2024-06-18","title":"1.1.1 (2024-06-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>dialog is blocking navigation in FE scenarios (#579) (5a0b05d)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#110-2024-06-13","title":"1.1.0 (2024-06-13)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_9","title":"Features","text":"<ul> <li>new option <code>excludeColumns</code> (#575) (a639b02)</li> <li>parse <code>Edm.Time</code> when excel data is text (#573) (cfaeace)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#100-2024-05-23","title":"1.0.0 (2024-05-23)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_1","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>release 1.0.0</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_10","title":"Features","text":"<ul> <li>new language portuguese by LLM translation (#553) (76d246c)</li> <li>release 1.0.0 (345b82f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>dialog margin in <code>sapUiSizeCozy</code> mode (#562) (4104fb9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0341-2024-05-08","title":"0.34.1 (2024-05-08)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>add seconds when parsing odata time (#549) (b5f69bc)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0340-2024-05-08","title":"0.34.0 (2024-05-08)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_2","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>enable packaged deployment (#547) (6d3450b)</li> </ul> <p>because of a bug, it is not possible to do a packaged central deployment of bug in the abap system. The Bug was fixed as described in #490, but still relevant in older ABAP Systems. To make things easier and make the packaged central deployment possible at all, it is necessary to add the version to the metadata name and make the resources path lowercase because abap system can\u00b4t handle camel case.</p>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#new-metadata-name","title":"New metadata name","text":"<pre><code>ui5-cc-spreadsheetimporter-v0-34-0\n</code></pre>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#new-lowercase-resourceroots-path","title":"New lowercase resourceRoots path","text":"<p>Instead of <code>thirdparty/customControl/spreadsheetImporter/v0_34_0</code> it is <code>thirdparty/customcontrol/spreadsheetimporter/v0_34_0</code></p>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0334-2024-04-19","title":"0.33.4 (2024-04-19)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>make <code>fireEventAsync</code> more stable (#534) (1ab4cd2)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0333-2024-04-18","title":"0.33.3 (2024-04-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>design improvements (#527) (af21d7b)</li> <li>make sure payload in <code>changeBeforeCreate</code> is used (#528) (89f3292)</li> <li>reset context on server error (#525) (d1dd033)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0332-2024-04-08","title":"0.33.2 (2024-04-08)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>special case for Edm.Byte for OData V2 (#519) (36b5f7c)</li> <li>update SheetJS to 0.20.2 (#521) (29301d2)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0331-2024-02-29","title":"0.33.1 (2024-02-29)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>parse Edm.Byte and Edm.SByte (#506) (1b50aef)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0330-2024-02-23","title":"0.33.0 (2024-02-23)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_11","title":"Features","text":"<ul> <li>possibility to overwrite i18n texts (#501) (4c08ed7)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0320-2024-02-15","title":"0.32.0 (2024-02-15)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_12","title":"Features","text":"<ul> <li>add drag&amp;drop to dialog to upload files (#496) (ea55361)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0316-2024-02-14","title":"0.31.6 (2024-02-14)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>turn off <code>continue anyway</code> on error dialog after upload button press (#494) (fb82978)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0315-2024-02-05","title":"0.31.5 (2024-02-05)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>make sure Edm.Date uses the correct date (#487) (934fe3b)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0314-2024-02-01","title":"0.31.4 (2024-02-01)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>show error in standalone mode after upload button press (#480) (9348694)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0313-2024-01-30","title":"0.31.3 (2024-01-30)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>preventDefault on event <code>uploadButtonPress</code> (#476) (4c6033e)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0312-2024-01-23","title":"0.31.2 (2024-01-23)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>update sheetjs to 0.20.1 (#463) (16a2722)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0311-2024-01-03","title":"0.31.1 (2024-01-03)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>string assignment using nullish coalescing operator (#450) (530fcbd)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0310-2024-01-02","title":"0.31.0 (2024-01-02)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_13","title":"Features","text":"<ul> <li>add config for btp deployment with managed approuter (#419) (470b68f)</li> <li>new checks for maxLength and duplicate columns (#447) (7d47e28)</li> <li>new config to define columns in preview (#443) (b98db12)</li> <li>new option `createActiveEntity\u00b4 to directly create active entities (#438) (a3449f7)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>check if ComponentContainerData is available (#445) (c484e42)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0300-2023-12-21","title":"0.30.0 (2023-12-21)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_14","title":"Features","text":"<ul> <li>enable spreadsheet importer for ui5 v2 (#440) (763c2c7)</li> <li>new config to continue batch processing on errors (#441) (25dda51)</li> <li>new config to send the spreadsheet row to the backend (#439) (44af189)</li> <li>use events with async attached function s(#435) (2c95615)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0291-2023-12-16","title":"0.29.1 (2023-12-16)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>add missing row number in excel log file (#421) (6b05df3)</li> <li>avoid error when annotation not found (#430) (a989e5f)</li> <li>better error handling on backend errors (#426) (7541ab9)</li> <li>sampleData only if defined (#428) (dfdacb1)</li> <li>use sample data in standalone mode (#429) (3b9b165)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0290-2023-10-30","title":"0.29.0 (2023-10-30)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_15","title":"Features","text":"<ul> <li>new config to provide own template file (#406) (591e284)</li> <li>new config to skip columns check (#404) (6a14152)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>add parsedData to CheckBeforeRead event (#407) (110933a)</li> <li>hide generateTemplate in standalone (#409) (b9172db)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0281-2023-10-18","title":"0.28.1 (2023-10-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>add missing event requestCompleted to eventMethodMap (#389) (51f5c04)</li> <li>add xlsm add upload type (#395) (0ce65d1)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0280-2023-10-12","title":"0.28.0 (2023-10-12)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_16","title":"Features","text":"<ul> <li>new event <code>requestCompleted</code> (#386) (81baaac)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0271-2023-10-10","title":"0.27.1 (2023-10-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>preview (#382) (8eb8b28)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0270-2023-10-06","title":"0.27.0 (2023-10-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_17","title":"Features","text":"<ul> <li>add sheet selector if multiple sheets in file (#376) (94de1b4)</li> <li>error report can be downloaded as spreadsheet file (#378) (7fc727e)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>i18n date parser attribute (#380) (b0e8279)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0261-2023-09-30","title":"0.26.1 (2023-09-30)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>event attachment of componentContainer (#372) (5f71366)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0260-2023-09-30","title":"0.26.0 (2023-09-30)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_3","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>usage of UIComponent to return button (#370)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_18","title":"Features","text":"<ul> <li>usage of UIComponent to return button (#370) (6ef0f46)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0254-2023-09-28","title":"0.25.4 (2023-09-28)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>template generation in standalone mode (#368) (c0af0d9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0253-2023-09-11","title":"0.25.3 (2023-09-11)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>check for odata type config parameter (#361) (86706cc)</li> <li>use label in preview table (#359) (9a02b30)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0252-2023-09-06","title":"0.25.2 (2023-09-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>readAllSheets Parameter fixed (#354) (88475fb)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0251-2023-09-06","title":"0.25.1 (2023-09-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>close busy dialog on backend error (#348) (e1cc5e6)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0250-2023-09-06","title":"0.25.0 (2023-09-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_19","title":"Features","text":"<ul> <li>add sheet name to payload (#346) (4af5b47)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>add missing event parameter for uploadButtonPress event (#344) (93b7613)</li> <li>make parameter optional (#341) (d52486d)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0240-2023-08-10","title":"0.24.0 (2023-08-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_20","title":"Features","text":"<ul> <li>use odataType to create data for other entity (#334) (7330ebb)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0231-2023-08-03","title":"0.23.1 (2023-08-03)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>enable usage of controller extensions (#330) (f767a5c)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0230-2023-08-03","title":"0.23.0 (2023-08-03)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_21","title":"Features","text":"<ul> <li>add progress indicator for large files (#327) (3bcfc26)</li> <li>improve tablechooser (#326) (268a1a7)</li> <li>new TableChooser if multiple tables in view (#325) (bfe5096)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>rename tableChooser to tableSelector (#328) (50b21c3)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0220-2023-07-12","title":"0.22.0 (2023-07-12)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_22","title":"Features","text":"<ul> <li>new option, add your own <code>sampleData</code> (#318) (24cef4f)</li> <li>parse i18n texts from metadata (#319) (278447d)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>continue on error did not work (#316) (5d1d55c)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0212-2023-07-03","title":"0.21.2 (2023-07-03)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>update <code>ui5-tooling-transpile</code> to use types in apps (#301) (7e0a35c)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0211-2023-06-30","title":"0.21.1 (2023-06-30)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>change texts when records are uploaded to app (#293) (13555fd)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0210-2023-06-28","title":"0.21.0 (2023-06-28)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_4","title":"\u26a0 BREAKING CHANGES","text":"<p>The package was renamed from <code>ui5-cc-excelupload</code> to <code>ui5-cc-spreadsheetimporter</code>!</p> <ul> <li>rename to spreadsheet importer (removing word <code>excel</code>) (#282)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_23","title":"Features","text":"<ul> <li>rename to spreadsheet importer (removing word <code>excel</code>) (#282) (e661c3e)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0200-2023-06-27","title":"0.20.0 (2023-06-27)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_24","title":"Features","text":"<ul> <li>added sample data to template including formats and option to hide it (#275) (3766049)</li> <li>export ts types and new ts sample app (#278) (46fbaee)</li> <li>option to define available options for user (#264) (e6abe2d)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0191-2023-06-19","title":"0.19.1 (2023-06-19)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>improve error Message on table discovery (#270) (0215ba0)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0190-2023-06-10","title":"0.19.0 (2023-06-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_25","title":"Features","text":"<ul> <li>add debugging option (#257) (61a5f3f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0181-2023-06-09","title":"0.18.1 (2023-06-09)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>removed check for nullable fields (#255) (f4b569a)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0180-2023-06-02","title":"0.18.0 (2023-06-02)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_26","title":"Features","text":"<ul> <li>add new option to show backend error message (#236) (f2a38dd)</li> <li>show options menu for some configurations (#241) (8bfae76)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>different format in float and integer for v4 (#240) (23b1b9a)</li> <li>improve handling of backend errors (#213) (5d06db6)</li> <li>send double as string value (#234) (799a3ef)</li> <li>use busy indicator on opening options menu (#242) (0151700)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0175-2023-05-22","title":"0.17.5 (2023-05-22)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>add missing check on option \"skip checks mandatory field\" in v2 (#229) (6c7f53b)</li> <li>skip sap properties (#228) (69bbe03)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0174-2023-05-22","title":"0.17.4 (2023-05-22)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_52","title":"Bug Fixes","text":"<ul> <li>show raw value on parser error (#227) (50142bf)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0173-2023-05-20","title":"0.17.3 (2023-05-20)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_53","title":"Bug Fixes","text":"<ul> <li>remove popup in FE scenario when uploading (#223) (f7d12b3)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0172-2023-05-20","title":"0.17.2 (2023-05-20)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_54","title":"Bug Fixes","text":"<ul> <li>add missing Edm Types (Decimal, Integer) (#221) (7bda6d5)</li> <li>rename option to skip all metadata mandatory field checks (#220) (a7ac5e4)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0171-2023-05-20","title":"0.17.1 (2023-05-20)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_55","title":"Bug Fixes","text":"<ul> <li>messages are not a mandatory field (#217) (bc20e5c)</li> <li>parsing booleans (#219) (82777f9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0170-2023-05-18","title":"0.17.0 (2023-05-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_5","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>change API to add messages to Error Dialog (#211)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_27","title":"Features","text":"<ul> <li>add option to hide the \"preview data\" button (#212) (65bcb5b)</li> <li>add option to set decimal seperator (#199) (ba4a4f2)</li> <li>add option to skip Fields with <code>Nullable=false</code> (#216) (28ded2d)</li> <li>change API to add messages to Error Dialog (#211) (a06ec4e)</li> <li>show faulty value in the error dialog (#197) (8e09745)</li> <li>warning when numbers are formatted in file (#205) (701b31e)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0164-2023-05-09","title":"0.16.4 (2023-05-09)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_56","title":"Bug Fixes","text":"<ul> <li>check on mandatory fields (#192) (05dbcc9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0163-2023-05-09","title":"0.16.3 (2023-05-09)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_57","title":"Bug Fixes","text":"<ul> <li>correct check for mandatory fields (#190) (83a7d6f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0162-2023-05-09","title":"0.16.2 (2023-05-09)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_58","title":"Bug Fixes","text":"<ul> <li>add check if no annotations are found (#188) (bd440bf)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0161-2023-05-08","title":"0.16.1 (2023-05-08)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_59","title":"Bug Fixes","text":"<ul> <li>remove empty line (ae7bce8)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0160-2023-05-08","title":"0.16.0 (2023-05-08)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_28","title":"Features","text":"<ul> <li>add <code>continue on error</code> button in error dialog (#182) (40d7d28)</li> <li>add options menu for config (#183) (7533ba9)</li> <li>revert removal of option <code>fieldMatchType</code> (#157), new default <code>labelTypeBrackets</code> (#173) (7a91c19)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_60","title":"Bug Fixes","text":"<ul> <li>i18n language codes (#179) (851a50c)</li> <li>remove ids from options fragment (#184) (be2e947)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0150-2023-04-18","title":"0.15.0 (2023-04-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_6","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>removal of option <code>fieldMatchType</code> (#157)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_29","title":"Features","text":"<ul> <li>check for mandatory fields annotation (#162) (6c99324)</li> <li>removal of option <code>fieldMatchType</code> (#157) (4346e1b)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0141-2023-04-18","title":"0.14.1 (2023-04-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_61","title":"Bug Fixes","text":"<ul> <li>error message shown twice on listreport (#152) (d0a3d12)</li> <li>improve UX on upload dialog (#151) (4ca9e1f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0140-2023-04-14","title":"0.14.0 (2023-04-14)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_30","title":"Features","text":"<ul> <li>handle backend error (#110) (3abc24a)</li> <li>preview of data uploaded to app and row counter (#148) (fb57789)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0130-2023-04-13","title":"0.13.0 (2023-04-13)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_31","title":"Features","text":"<ul> <li>add event <code>uploadButtonPress</code> (#143) (23b918c)</li> <li>new option to upload in standalone mode (#145) (ead496f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0123-2023-04-11","title":"0.12.3 (2023-04-11)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_62","title":"Bug Fixes","text":"<ul> <li>enablement for V4 FPM (#135) (1bf89ba)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0122-2023-04-10","title":"0.12.2 (2023-04-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_63","title":"Bug Fixes","text":"<ul> <li>update correct versions in code (#124) (71f106e)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0121-2023-04-07","title":"0.12.1 (2023-04-07)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_64","title":"Bug Fixes","text":"<ul> <li>remove unused imports (#119) (2eea092)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0120-2023-04-04","title":"0.12.0 (2023-04-04)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_32","title":"Features","text":"<ul> <li>add Support for OpenUI5 (#97) (9f1ed6c)</li> <li>including Sample App for OpenUI5 and wdi5 Tests</li> <li>improve checks for all Edm Types (#105) (dc91ee2)</li> <li>Documentation for the improved Error Handling can be found here</li> <li>improved checks on the data formats and error handling (#103) (801cfcb)</li> <li>Improvements for custom error handling. Documentation can be found here</li> <li>new automatically translated languages added (#107) (477e899)</li> <li>the english language was automatic translated to following languages: <code>Chinese</code>, <code>French</code>, <code>Spanish</code>, <code>Italien</code>, <code>Hindi</code>, <code>Japanese</code></li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0114-2023-03-27","title":"0.11.4 (2023-03-27)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_65","title":"Bug Fixes","text":"<ul> <li>namespace at manifest was not replaced correctly (#91) (f60c19b)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0113-2023-03-20","title":"0.11.3 (2023-03-20)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_66","title":"Bug Fixes","text":"<ul> <li>use attribute tableId to get tableObject (#84) (0860373)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0112-2023-03-18","title":"0.11.2 (2023-03-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_67","title":"Bug Fixes","text":"<ul> <li>missing check for active draft option (#81) (e15e2eb)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0111-2023-03-17","title":"0.11.1 (2023-03-17)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_68","title":"Bug Fixes","text":"<ul> <li>use batchSize even when payload has less then 1000 lines (#77) (c0926d1)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0110-2023-03-17","title":"0.11.0 (2023-03-17)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_33","title":"Features","text":"<ul> <li>new option <code>batchSizes</code> to slice batch calls to backend (#75) (8f7684f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#0100-2023-03-12","title":"0.10.0 (2023-03-12)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_7","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>use namespace with underscores (#72)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#091-2023-03-02","title":"0.9.1 (2023-03-02)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_69","title":"Bug Fixes","text":"<ul> <li>check for binding before open dialog (#62) (c1f545f)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#090-2023-02-18","title":"0.9.0 (2023-02-18)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_34","title":"Features","text":"<ul> <li>check if all columns name in file match metadata (#57) (7c538a0)</li> <li>support for UI5 Tooling V3 (#47) (d9f52e9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_70","title":"Bug Fixes","text":"<ul> <li>Align Dialogs more with Fiori Guidelines (#54) (4f74eeb)</li> <li>horizontal scrollbar in dialog on mobile view (#55) (3288a25)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#081-2023-02-10","title":"0.8.1 (2023-02-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_71","title":"Bug Fixes","text":"<ul> <li>remove scrollbar from dialog (#45) (bb1b197)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#080-2023-02-10","title":"0.8.0 (2023-02-10)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_35","title":"Features","text":"<ul> <li>setup for central deployment abap (#41) (54bc904)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#070-2023-02-03","title":"0.7.0 (2023-02-03)","text":"<p>Breaking Changes</p> <p>Changes involving in the manifest and custom code implementation. See Documenation</p>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_72","title":"Bug Fixes","text":"<ul> <li>component-preload.js and componentUsages in examples apps (#40) (33c6e88)</li> <li>upload same file two times (#37), closes #36 (553e5a8)</li> <li>using component-preload.js (#31) (4b223bb)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_36","title":"Features","text":"<ul> <li>add intial csv support (#33) (f7ec051)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#060-2023-01-14","title":"0.6.0 (2023-01-14)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_73","title":"Bug Fixes","text":"<ul> <li>open dialog twice again (#20) (7a37483)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_37","title":"Features","text":"<p>Created compatibility and wdi5 tests for List Report and Object Page in Draft Mode for OData V2 (Versions 108,96,84,71) and OData V4 (Versions 108,96,84) More info see Supported Versions</p> <ul> <li>compatibility/wdi5 tests with v2 FE 96/84/71 (3f010d9)</li> <li>support for v4 96/84 (#16) (109813f)</li> <li>working in Draft List Report V2/V4 (#17) (cc07d38)</li> <li>works in ListReport/ObjectPage V4/V2 and Freestyle V2(#10) (d9432d2)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#050-2023-01-04","title":"0.5.0 (2023-01-04)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_38","title":"Features","text":"<ul> <li>init i18n (#8) (593b009)</li> <li>multiversion support (#6) (68aa9ca)</li> <li>works in ListReport/ObjectPage V4/V2, V4 FPM and Freestyle V2(#10) (d9432d2)</li> <li>new option for draft Activation (#10) (d9432d2)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#040-2022-12-23","title":"0.4.0 (2022-12-23)","text":"<p>Breaking Changes</p> <p>Changes involving in the manifest and custom code implementation. See Documenation</p>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_39","title":"Features","text":"<ul> <li>multiversion support (#6) (68aa9ca)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#034-2022-12-09","title":"0.3.4 (2022-12-09)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_74","title":"Bug Fixes","text":"<ul> <li>change console output statement to debug (cd19150)</li> <li>Type \"Edm.DateTime parsed in false format (8fb6541)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_40","title":"Features","text":"<ul> <li>add dedicated docs with mkdocs (#3) (77a6e06)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#033-2022-12-07","title":"0.3.3 (2022-12-07)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_75","title":"Bug Fixes","text":"<ul> <li>check did not work with fieldMatchType:label (dde0bf9)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_41","title":"Features","text":"<ul> <li>convertion for date/time types before creation (65823aa)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#032-2022-12-07","title":"0.3.2 (2022-12-07)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_42","title":"Features","text":"<ul> <li>new parsing type of column header (713e8a1)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#031-2022-12-06","title":"0.3.1 (2022-12-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_76","title":"Bug Fixes","text":"<ul> <li>xlsx not in build (e3296c0)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#030-2022-12-06","title":"0.3.0 (2022-12-06)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#breaking-changes_8","title":"Breaking Changes","text":"<ul> <li>Move to reuse component, change in implementation</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#022-2022-12-01","title":"0.2.2 (2022-12-01)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_77","title":"Bug Fixes","text":"<ul> <li>change path, only dist folder for app build (300e2c5)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#021-2022-12-01","title":"0.2.1 (2022-12-01)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#bug-fixes_78","title":"Bug Fixes","text":"<ul> <li>remove wrong apostrophes from string (b1d31dc)</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#020-2022-11-30","title":"0.2.0 (2022-11-30)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#features_43","title":"Features","text":"<ul> <li>check for mandatory fields 0520ada</li> <li>try get file name from v4 model fa9a349</li> </ul>"},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#012-2022-11-29","title":"0.1.2 (2022-11-29)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#011-2022-11-29","title":"0.1.1 (2022-11-29)","text":""},{"location":"pages/CHANGELOGSPREADSHEETIMPORTER/#010-2022-11-29","title":"0.1.0 (2022-11-29)","text":""},{"location":"pages/CdsPlugin/","title":"CAP CDS Plugin Integration","text":"<p>The UI5 Spreadsheet Importer provides integration with SAP CAP (Cloud Application Programming Model) applications through its CDS plugin. This plugin allows for efficient handling of large Excel files by uploading the entire file directly to the CAP backend for processing, rather than extracting and sending data via standard UI5 APIs.</p>"},{"location":"pages/CdsPlugin/#overview","title":"Overview","text":"<p>The CDS plugin offers the following benefits:</p> <ul> <li>Server-side processing: The entire Excel file is sent to the backend, where it's processed efficiently</li> <li>Performance optimization: Significantly improves performance for large Excel files</li> <li>Reduced network traffic: Only sends the Excel file once instead of multiple OData calls</li> <li>Seamless integration: Works with both UI5 Spreadsheet Importer components and direct file uploads</li> </ul> <p>The source code is available here: https://github.com/spreadsheetimporter/cds-spreadsheetimporter-plugin</p>"},{"location":"pages/CdsPlugin/#installation","title":"Installation","text":"<p>To use the CDS plugin with your CAP application:</p> <pre><code>npm install cds-spreadsheetimporter-plugin --save\n</code></pre>"},{"location":"pages/CdsPlugin/#backend-implementation","title":"Backend Implementation","text":""},{"location":"pages/CdsPlugin/#1-add-as-dependency-in-packagejson","title":"1. Add as dependency in package.json","text":"<p>Make sure the plugin is added to your CAP project's package.json:</p> <pre><code>{\n  \"dependencies\": {\n    \"cds-spreadsheetimporter-plugin\": \"^1.0.3\",\n    \"@sap/cds\": \"^8.x\"\n    // other dependencies\n  }\n}\n</code></pre>"},{"location":"pages/CdsPlugin/#2-import-the-plugin-in-your-cap-service","title":"2. Import the plugin in your CAP service","text":"<p>Add the plugin to your service CDS file:</p> <pre><code>using { sap.capire.orders as my } from '../db/schema';\nusing from 'cds-spreadsheetimporter-plugin';\n\nservice OrdersService {\n  entity Orders as projection on my.Orders;\n  ...\n</code></pre>"},{"location":"pages/CdsPlugin/#3-how-the-plugin-works","title":"3. How the plugin works","text":"<p>The plugin adds a new service endpoint to your CAP application:</p> <pre><code>/odata/v4/importer/Spreadsheet(entity='&lt;CDS_ENTITY_NAME&gt;')/content\n</code></pre> <p>This endpoint:</p> <ol> <li>Accepts Excel file uploads via PUT request</li> <li>Processes the file server-side using the XLSX library</li> <li>Maps spreadsheet columns to entity properties</li> <li>Validates the data against the CDS entity model</li> <li>Inserts the processed data into the database</li> </ol> <p>The CDS definition for the service is:</p> <pre><code>service ImporterService {\n  entity Spreadsheet {\n    key entity: String;\n    content: LargeBinary @Core.MediaType : 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n  }\n}\n</code></pre>"},{"location":"pages/CdsPlugin/#integration-methods","title":"Integration Methods","text":"<p>There are two ways to use the CDS plugin: via the UI5 Spreadsheet Importer component or with a direct file upload.</p>"},{"location":"pages/CdsPlugin/#method-1-using-ui5-spreadsheet-importer-component","title":"Method 1: Using UI5 Spreadsheet Importer Component","text":"<p>Feature Availability</p> <p>This feature is available since version 2.1.0.</p> <p>The simplest approach is to use the UI5 Spreadsheet Importer with the <code>directUploadConfig</code> option:</p> <pre><code>&lt;core:ComponentContainer\n  id=\"spreadsheetToCAP\"\n  width=\"100%\"\n  usage=\"spreadsheetImporter\"\n  propagateModel=\"true\"\n  async=\"true\"\n  settings=\"{\n        directUploadConfig:{\n            enabled: true,\n            localhostSupport: true,\n            localhostPort: 4004,\n            useCdsPlugin: true\n        },\n        componentContainerData:{\n            buttonText:'Excel Upload with CDS Plugin',\n            buttonId:'uploadButton'\n        }\n    }\"\n/&gt;\n</code></pre>"},{"location":"pages/CdsPlugin/#method-2-direct-file-upload","title":"Method 2: Direct File Upload","text":"<p>You can also use a standard UI5 FileUploader to send the file directly to the CAP endpoint:</p> <pre><code>&lt;u:FileUploader\n  id=\"fileUploader\"\n  name=\"myFileUpload\"\n  uploadUrl=\"/odata/v4/importer/Spreadsheet(entity='OrdersService.Orders')/content\"\n  tooltip=\"Upload your file to the local server\"\n  httpRequestMethod=\"Put\"\n  sendXHR=\"true\"\n  uploadOnChange=\"true\"\n  style=\"Emphasized\"\n  fileType=\"xlsx\"\n  placeholder=\"Choose a file for Upload...\"\n/&gt;\n</code></pre>"},{"location":"pages/CdsPlugin/#configuration-options","title":"Configuration Options","text":""},{"location":"pages/CdsPlugin/#directuploadconfig-options","title":"DirectUploadConfig Options","text":"<p>When using the UI5 Spreadsheet Importer component, the following <code>directUploadConfig</code> options are available:</p> Option Type Default Description <code>enabled</code> Boolean <code>false</code> Enables direct upload to the CAP backend <code>useCdsPlugin</code> Boolean <code>false</code> Indicates that the CAP backend uses the CDS plugin <code>localhostSupport</code> Boolean <code>false</code> Enables support for localhost development <code>localhostPort</code> Number <code>4004</code> Port for localhost development <code>prependPath</code> String <code>null</code> Custom path to prepend to the upload URL <code>entity</code> String Auto-detected The CDS entity name for processing the upload <code>collection</code> String Auto-detected The collection path for the entity <code>service</code> String Auto-detected The service name"},{"location":"pages/CdsPlugin/#backend-processing-options","title":"Backend Processing Options","text":"<p>When calling the endpoint directly, you can include additional parameters:</p> <pre><code>/odata/v4/importer/Spreadsheet(entity='OrdersService.Orders',action='UPDATE')/content\n</code></pre> Parameter Description <code>entity</code> Required. CDS entity name to import data into"},{"location":"pages/CdsPlugin/#complete-example","title":"Complete Example","text":"<p>Here's a complete example using UI5 Spreadsheet Importer with CDS plugin integration:</p> <pre><code>&lt;core:ComponentContainer\n  id=\"spreadsheetToCAP\"\n  width=\"100%\"\n  usage=\"spreadsheetImporter\"\n  propagateModel=\"true\"\n  async=\"true\"\n  settings=\"{\n        directUploadConfig:{\n            enabled: true,\n            useCdsPlugin: true,\n            localhostSupport: true,\n            localhostPort: 4004\n        },\n        componentContainerData:{\n            buttonText:'Excel Upload with CDS Plugin',\n            buttonId:'uploadButton'\n        }\n    }\"\n/&gt;\n</code></pre>"},{"location":"pages/CdsPlugin/#backend-implementation-details","title":"Backend Implementation Details","text":"<p>The plugin's backend implementation:</p> <ol> <li>Receives the Excel file as a stream through the OData service</li> <li>Processes the file using the XLSX library</li> <li>Converts spreadsheet data to properly typed entity data</li> <li>Handles associations and relationships based on the CDS model</li> <li>Performs batch insertion into the database</li> </ol> <p>The core processing logic:</p> <ul> <li>Extracts sheet data using <code>XLSX.read()</code></li> <li>Processes data from all sheets or a specific sheet</li> <li>Maps column headers to CDS entity properties</li> <li>Validates data types against CDS model</li> <li>Inserts the processed data into the database</li> </ul>"},{"location":"pages/CentralDeployment/","title":"Central Deployment of UI5 Spreadsheet Importer","text":"<p>Deploying the UI5 Spreadsheet Importer centrally is the recommended approach. Central deployment simplifies usage for individual developers, as the component becomes readily available across the system.</p>"},{"location":"pages/CentralDeployment/#deployment-to-abap-system","title":"Deployment to ABAP System","text":"<p>You can deploy the UI5 Spreadsheet Importer to an ABAP system using one of the following methods:</p>"},{"location":"pages/CentralDeployment/#method-1-using-ui5-carrier-app","title":"Method 1: Using UI5 Carrier App","text":"<p>The recommended method is to use a UI5 carrier app. This app contains all required versions of the Spreadsheet Importer component. By deploying this carrier app, all versions become available in the system with a single deployment. The components are registered in the app index through the deployment.</p>"},{"location":"pages/CentralDeployment/#steps","title":"Steps:","text":"<p>1. Clone the Sample Carrier App Repository</p> <p>A sample carrier app is available here. Clone this repository to your local machine:</p> <pre><code>git clone https://github.com/spreadsheetimporter/packed-deployment-abap\n</code></pre> <p>2. Follow the Instructions</p> <p>Navigate to the repository's <code>README.md</code> file and follow the detailed deployment instructions provided there.</p> <p>2 a). Delete versions you don't need</p> <p>If you don't need all versions, you can delete them from the <code>package.json</code> and <code>manifest.json</code> file.</p> <p>3. Use the Component in Your Fiori App</p> <p>After successful deployment, the Spreadsheet Importer component is available for use in your Fiori applications.</p>"},{"location":"pages/CentralDeployment/#s4hana-public-cloud-considerations","title":"S/4HANA Public Cloud Considerations","text":"<p>For deployment to S/4HANA Public Cloud, you need to make the component available in the SAP Fiori Launchpad (FLP) and assign it to users.</p> <ul> <li>The <code>crossNavigation</code> configuration is already defined in the carrier app's manifest.json.</li> <li>Upon deployment, an FLP app descriptor is created.</li> <li>You need to create or update an IAM app, add the component to a catalog, and assign it to a role, as explained in this SAP tutorial.</li> <li>Important: Ensure that users have the necessary role assigned; otherwise, they may encounter an error like <code>\"Blocked by UCON\"</code>.</li> </ul>"},{"location":"pages/CentralDeployment/#method-2-manual-deployment","title":"Method 2: Manual Deployment","text":"<p>If you prefer manual deployment, follow these steps:</p> <p>1. Clone the Repository</p> <pre><code>git clone https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter\n</code></pre> <p>2. Install Dependencies</p> <p>Navigate to the cloned directory and install the necessary dependencies:</p> <pre><code>npm install --legacy-peer-deps\n</code></pre> <p>3. Configure <code>ui5-deploy.yaml</code></p> <p>Update the default <code>ui5-deploy.yaml</code> file with your deployment settings.</p> <ul> <li>Version Management: When deploying a new version, use a unique app name to avoid overwriting existing versions. This is automatically handled by the variable <code>XXXnamespaceShortXXX</code> in the <code>ui5-deploy-publish.yaml</code> file.</li> <li>Custom App Name: If you choose to use your own app name, ensure you change it for newer versions to prevent overwriting.</li> </ul> <p>4. Set Up Environment Variables</p> <ul> <li>For Deployment from VS Code: Rename <code>.envTEMPLATE</code> to <code>.env</code> and enter your ABAP system username and password.</li> <li>For Deployment from SAP Business Application Studio (BAS): Remove the <code>credentials</code> section from the <code>ui5-deploy.yaml</code> file.</li> </ul> <p>5. Run Deployment</p> <p>Navigate to the package directory and execute the deployment script:</p> <pre><code>cd packages/ui5-cc-spreadsheetimporter\nnpm run deploy\n</code></pre>"},{"location":"pages/CentralDeployment/#deployment-to-html5-repository-on-btp","title":"Deployment to HTML5 Repository on BTP","text":"<p>To deploy the UI5 Spreadsheet Importer to the HTML5 Repository on SAP BTP, follow these steps:</p> <p>1. Clone the Repository</p> <pre><code>git clone https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter\n</code></pre> <p>2. Install Dependencies</p> <pre><code>npm install --legacy-peer-deps\n</code></pre> <p>3. Optional: Modify <code>mta.yaml</code></p> <p>The <code>mta.yaml</code> file is used for deployment to the HTML5 Repository on BTP. If you need to customize deployment settings, you can modify this file accordingly.</p> <p>4. Build the MTA Archive</p> <pre><code>npm run build:mta\n</code></pre> <p>5. Deploy to Cloud Foundry</p> <pre><code>npm run deploy:cf\n</code></pre>"},{"location":"pages/CentralDeployment/#consuming-the-component-in-a-ui5-app","title":"Consuming the Component in a UI5 App","text":"<p>After deploying the component centrally, you can consume it in your UI5 application without installing it via npm or modifying the <code>resourceRoots</code> in <code>manifest.json</code>.</p> <ul> <li>Follow the same steps outlined in the Getting Started guide, omitting the npm installation and <code>resourceRoots</code> configuration.</li> </ul> <p>For consuming apps on SAP BTP, you can refer to this sample app, which demonstrates deployment to the HTML5 Repository.</p>"},{"location":"pages/CentralDeployment/#additional-resources","title":"Additional Resources","text":"<p>For more detailed information and guidance, consider reading the following blog posts by Wouter Lemaire:</p> <ul> <li>Connecting UI5 Components in BTP Cloud Foundry in the Same Space</li> <li>Connecting UI5 Components in BTP Cloud Foundry Across Spaces</li> </ul>"},{"location":"pages/CentralDeployment/#running-the-app-locally","title":"Running the App Locally","text":"<p>When the component is deployed centrally, you can still run your app locally. This can be achieved by either installing the component as a development dependency or by consuming the centrally deployed component from the ABAP system.</p>"},{"location":"pages/CentralDeployment/#consuming-the-component-as-a-dev-dependency-locally","title":"Consuming the Component as a Dev Dependency Locally","text":"<p>Simulate the centrally deployed component in your local environment by following these steps:</p> <p>1. Install <code>cds-plugin-ui5</code> (If Using CAP Projects)</p> <pre><code>npm install cds-plugin-ui5 --save-dev\n</code></pre> <p>2. Install the Component as a Dev Dependency</p> <p>Install the specific version of the component that your app uses:</p> <pre><code>npm install ui5-cc-spreadsheetimporter --save-dev\n</code></pre> <p>3. Install <code>ui5-middleware-servestatic</code></p> <pre><code>npm install ui5-middleware-servestatic --save-dev\n</code></pre> <p>4. Configure <code>ui5.yaml</code></p> <p>Add the following configuration to your <code>ui5.yaml</code> file (adjust the version number as needed):</p> <pre><code>server:\n  customMiddleware:\n    - name: ui5-middleware-servestatic\n      afterMiddleware: compression\n      mountPath: /resources/cc/spreadsheetimporter/v2_3_0/\n      configuration:\n        rootPath: 'node_modules/ui5-cc-spreadsheetimporter/dist'\n</code></pre>"},{"location":"pages/CentralDeployment/#consuming-the-centrally-deployed-component-from-abap-system","title":"Consuming the Centrally Deployed Component from ABAP System","text":"<p>To consume the centrally deployed component while developing locally in VS Code or BAS:</p> <p>1. Determine the Component URL</p> <p>Access the App Index to find the URL of the component:</p> <pre><code>&lt;SAP_SYSTEM_URL&gt;/sap/bc/ui2/app_index/ui5_app_info?id=cc.spreadsheetimporter.v2_3_0\n</code></pre> <p>2. Configure Proxy Middleware</p> <p>Depending on your setup, use either <code>fiori-tools-proxy</code> or <code>ui5-middleware-simpleproxy</code> in your <code>ui5.yaml</code> file.</p> <p>Using <code>fiori-tools-proxy</code>:</p> <pre><code>server:\n  customMiddleware:\n    - name: fiori-tools-proxy\n      afterMiddleware: compression\n      configuration:\n        backend:\n          - path: /sap\n            url: &lt;Cloud Connector or local URL&gt;\n            destination: &lt;System Destination Name if in BAS&gt;\n          - path: /resources/cc/spreadsheetimporter/v2_3_0\n            destination: &lt;System Destination Name if in BAS&gt;\n            pathPrefix: /sap/bc/ui5_ui5/sap/&lt;BSP_NAME&gt;/thirdparty/customcontrol/spreadsheetimporter/v2_3_0/\n            url: &lt;Cloud Connector or local URL&gt;\n</code></pre> <p>Using <code>ui5-middleware-simpleproxy</code>:</p> <pre><code>server:\n  customMiddleware:\n    - name: ui5-middleware-simpleproxy\n      afterMiddleware: compression\n      mountPath: /resources/cc/spreadsheetimporter/v2_3_0/\n      configuration:\n        baseUri: '&lt;SAP_SYSTEM_URL&gt;/sap/bc/ui5_ui5/sap/&lt;BSP_NAME&gt;/thirdparty/customcontrol/spreadsheetimporter/v2_3_0/'\n        username: &lt;SAP_USERNAME&gt;\n        password: &lt;SAP_PASSWORD&gt;\n        query:\n          sap-client: '100'\n</code></pre> <p>Note: Replace placeholders like <code>&lt;SAP_SYSTEM_URL&gt;</code>, <code>&lt;BSP_NAME&gt;</code>, <code>&lt;SAP_USERNAME&gt;</code>, and <code>&lt;SAP_PASSWORD&gt;</code> with your actual system details.</p>"},{"location":"pages/Checks/","title":"Error Handling","text":""},{"location":"pages/Checks/#error-types","title":"Error Types","text":"<p>The following types of errors are handled by the UI5 Spreadsheet Upload Control:</p> <ul> <li> <p>Mandatory Fields (Available since: Initial release): The control ensures that all mandatory fields are filled in before submitting data. If a mandatory field is left blank, an error message is displayed.</p> </li> <li> <p>Mandatory Fields Metadata (Available since: 0.15.0): The control parses the metadata of the entity set and checks if all mandatory fields are filled in before submitting data. If a mandatory field is left blank, an error message is displayed (CAP Annotation).</p> </li> <li> <p>Column Names Mismatch (Available since: 0.9.0): The control checks if the column names in the uploaded file match the expected column names. If there is a mismatch, such as an additional column that shouldn't be there, an error message is displayed.</p> </li> <li> <p>Data Type Mismatch (Available since: Initial release, improved in 0.12.0): The control checks if the data types in the uploaded file match the expected data types.</p> </li> <li> <p>Custom Errors (Available since: Initial release): The control allows you to add custom errors to the error dialog. You can add errors to the <code>messages</code> property of the <code>SpreadsheetUpload</code> control. After the event, the upload is canceled and the errors are displayed in the Error Dialog (see Events for more information).</p> </li> <li> <p>Backend Errors (Available since: 0.14.0): If the backend service returns an error, it is displayed. In the case of checks during saving (e.g. RAP or CAP), no error is displayed in the draft scenario in Fiori Element Apps as Fiori Element catches these errors.</p> </li> <li> <p>Duplicate Columns (Available since: 0.31.0): The control checks if the uploaded file contains duplicate columns. If there is a duplicate column, an error message is displayed.</p> </li> <li> <p>Max Length (Available since: 0.31.0): The control checks if the length of the data in the uploaded file does not exceed the maximum length of the corresponding field. If the length exceeds the maximum length, an error message is displayed.</p> </li> <li> <p>Empty Headers (Available since: 1.2.0): The control checks if the uploaded spreadsheet contains empty headers (columns labeled \"**EMPTY\", \"**EMPTY_1\", etc.). These typically occur when Excel adds empty columns during import. When an empty header is detected, the control displays a warning message indicating the presence of empty columns and providing guidance on the expected start position for data. This check helps ensure data is properly aligned with column headers, especially when using custom start coordinates. This check can be disabled using the <code>skipEmptyHeadersCheck</code> configuration option.</p> </li> </ul>"},{"location":"pages/Configuration/","title":"Configuration","text":""},{"location":"pages/Configuration/#options","title":"Options","text":"<p>How to use them see Example Code</p>"},{"location":"pages/Configuration/#configuration-overview","title":"Configuration Overview","text":"<p>The table below summarizes the options available for the UI5 Spreadsheet Importer Component. Detailed explanations and examples for each option are provided in the linked sections.</p>"},{"location":"pages/Configuration/#file-handling-options","title":"File Handling Options","text":"Option Description Default Available since Type <code>columns</code> Defines columns to import and display in the template. All fields Initial release <code>string[]</code> <code>excludeColumns</code> Specifies columns to exclude from import and template. <code>[]</code> 1.1.0 <code>string[]</code> <code>spreadsheetFileName</code> Sets the file name when downloading the template. <code>\"Template.xlsx\"</code> Initial release <code>string</code> <code>spreadsheetTemplateFile</code> Uses a custom template file instead of generating one. <code>\"\"</code> 0.29.0 <code>string</code> or <code>ArrayBuffer</code> <code>readAllSheets</code> Reads all sheets in standalone mode. <code>false</code> 0.25.0 <code>boolean</code> <code>readSheet</code> Reads a specific sheet or shows a sheet selector. <code>0</code> 0.27.0 <code>number</code> or <code>string</code> <code>readSheetCoordinates</code> Specifies the starting cell for reading spreadsheet data. <code>\"A1\"</code> 1.2.0 <code>string</code> <code>enablePaste</code> Enables paste functionality for data and files. <code>true</code> 2.3.0 <code>boolean</code>"},{"location":"pages/Configuration/#ui-customization-options","title":"UI Customization Options","text":"Option Description Default Available since Type <code>hidePreview</code> Hides the button to preview uploaded data. <code>false</code> 0.17.0 <code>boolean</code> <code>previewColumns</code> Specifies columns to display in the preview dialog. <code>[]</code> 0.31.0 <code>string[]</code> <code>showBackendErrorMessages</code> Displays backend error messages in the UI. <code>false</code> 0.18.0 <code>boolean</code> <code>showOptions</code> Shows a menu to change configurations at runtime. <code>false</code> 0.18.0 <code>boolean</code> <code>showDownloadButton</code> Shows the button to download the uploaded data. <code>false</code> Initial release <code>boolean</code>"},{"location":"pages/Configuration/#data-processing-options","title":"Data Processing Options","text":"Option Description Default Available since Type <code>action</code> Sets the operation type (CREATE or UPDATE). <code>CREATE</code> 1.7.0 <code>string</code> <code>batchSize</code> Controls the size of batches sent to the backend. <code>1000</code> 0.11.0 <code>number</code> <code>strict</code> Controls availability of the \"Continue\" button in error dialogs. <code>false</code> 0.16.0 <code>boolean</code> <code>decimalSeparator</code> Sets the decimal separator for numbers. Browser default 0.17.0 <code>string</code> <code>mandatoryFields</code> Specifies mandatory fields to check in the spreadsheet. Not defined 0.15.0 <code>string[]</code> <code>skipMandatoryFieldCheck</code> Skips the check for mandatory fields. <code>false</code> 0.17.0 <code>boolean</code> <code>skipColumnsCheck</code> Skips the check for unknown columns not in metadata. <code>false</code> 0.29.0 <code>boolean</code> <code>skipMaxLengthCheck</code> Skips the max length check for column values. <code>false</code> 0.31.0 <code>boolean</code> <code>skipEmptyHeadersCheck</code> Skips the check for empty headers in spreadsheet. <code>false</code> 1.2.0 <code>boolean</code> <code>continueOnError</code> Continues processing next batches even after errors. <code>false</code> 0.30.0 <code>boolean</code>"},{"location":"pages/Configuration/#advanced-configuration-options","title":"Advanced Configuration Options","text":"Option Description Default Available since Type <code>fieldMatchType</code> Strategy for matching spreadsheet columns to fields. <code>\"labelTypeBrackets\"</code> Initial release <code>string</code> <code>activateDraft</code> Activates a draft immediately if possible. <code>false</code> 0.5.0 <code>boolean</code> <code>createActiveEntity</code> Directly creates an active entity in draft scenarios. <code>false</code> 0.31.0 <code>boolean</code> <code>standalone</code> Uses the component in standalone mode without a table. <code>false</code> 0.13.0 <code>boolean</code> <code>useTableSelector</code> Allows choosing a table when multiple tables are present. <code>false</code> 0.23.0 <code>boolean</code> <code>hideSampleData</code> Omits sample data in the template file. <code>false</code> 0.20.0 <code>boolean</code> <code>sampleData</code> Adds custom sample data to the template file. Auto-generated 0.22.0 <code>object[]</code> <code>debug</code> Enables debug mode with additional console logs. <code>false</code> 0.19.0 <code>boolean</code> <code>componentContainerData</code> Special options for using the component in a <code>ComponentContainer</code>. Not specified 0.26.0 <code>object</code> <code>bindingCustom</code> Uses a custom OData binding instead of a table binding. Not specified 1.3.0 <code>object</code> <code>i18nModel</code> Uses a custom i18n model to override default texts. Not specified 0.33.0 <code>object</code> <code>useImportWizard</code> Enables wizard-based import dialog with guided steps. <code>false</code> 2.2.0 <code>boolean</code>"},{"location":"pages/Configuration/#directuploadconfig","title":"<code>directUploadConfig</code>","text":"<p>default: Not specified Available since: 2.1.0</p> <p>The <code>directUploadConfig</code> option enables direct file upload to a CAP backend using the CDS plugin. Instead of extracting data from the Excel file and sending it through standard UI5 APIs, this approach uploads the entire Excel file directly to the backend for server-side processing, which is much more efficient for large files.</p> Option Type Default Description <code>enabled</code> Boolean <code>false</code> Enables direct upload to the CAP backend <code>useCdsPlugin</code> Boolean <code>false</code> Indicates that the CAP backend uses the CDS plugin <code>localhostSupport</code> Boolean <code>false</code> Enables support for localhost development <code>localhostPort</code> Number <code>4004</code> Port for localhost development <code>prependPath</code> String <code>null</code> Custom path to prepend to the upload URL <code>entity</code> String Auto-detected The CDS entity name for processing the upload <code>collection</code> String Auto-detected The collection path for the entity <code>service</code> String Auto-detected The service name <p>Example:</p> <pre><code>&lt;core:ComponentContainer\n  id=\"spreadsheetToCAP\"\n  width=\"100%\"\n  usage=\"spreadsheetImporter\"\n  propagateModel=\"true\"\n  async=\"true\"\n  settings=\"{\n        directUploadConfig:{\n            enabled: true,\n            useCdsPlugin: true,\n            localhostSupport: true,\n            localhostPort: 4004,\n            csrf: true,\n            uploadTimeout: 30000\n        },\n        componentContainerData:{\n            buttonText:'Excel Upload with CDS Plugin',\n            buttonId:'uploadButton'\n        }\n    }\"\n/&gt;\n</code></pre> <p>The upload URL follows this format: <code>/odata/v4/importer/Spreadsheet(entity='&lt;CDS_ENTITY_NAME&gt;')/content</code></p> <p>You can also pass additional parameters to the backend:</p> <pre><code>/odata/v4/importer/Spreadsheet(entity='OrdersService.Orders',action='UPDATE')/content\n</code></pre> <p>For more details, see the CAP CDS Plugin documentation.</p>"},{"location":"pages/Configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"pages/Configuration/#columns","title":"<code>columns</code>","text":"<p>default: all fields Available since: Initial release</p> <p>This option defines which fields should only be taken into account during the upload. example:</p> <pre><code>columns: [\"ID\", \"Birthday\",\"FirstName\",\"LastName\"],\n</code></pre>"},{"location":"pages/Configuration/#excludecolumns","title":"<code>excludeColumns</code>","text":"<p>default: [] Available since: 1.1.0</p> <p>You can specify columns to exclude from the import and the template. If you have already defined the <code>columns</code> property in your configuration, any columns listed in <code>excludeColumns</code> will be omitted from the final display. This allows you to focus on including only the relevant columns, rather than individually removing each unwanted column</p>"},{"location":"pages/Configuration/#spreadsheetfilename","title":"<code>spreadsheetFileName</code>","text":"<p>default: Template.xlsx Available since: Initial release</p> <p>This option defines the file name when a template is downloaded. If not defined, the code checks if Label for OData Type defined.</p>"},{"location":"pages/Configuration/#tableid","title":"<code>tableId</code>","text":"<p>Available since: Initial release</p> <p>This plugin first checks whether exactly one table exists on an object page. If there is no table or more than one table, an error is returned. In case of an error, the ID of the table can be specified. example:</p> <pre><code>tableId: \"ui5.isu.msb.createmeterread::RunObjectPage--fe::table::_Ableseauftrag::LineItem-innerTable\n</code></pre>"},{"location":"pages/Configuration/#odatatype","title":"<code>odataType</code>","text":"<p>Available since: 0.24.0</p> <p>With this option, it is possible to upload the data to a different Entity Set in the Service. This is helpful when the service from the table is not the actual service where the data should be uploaded.</p> <p>example:</p> <pre><code>odataType: com.sap.gateway.srvd.zui_mr_create_run.v0001.AbleseauftragType\n</code></pre> <pre><code>odataType: Orderservice.OrdersND\n</code></pre>"},{"location":"pages/Configuration/#mandatoryfields","title":"<code>mandatoryFields</code>","text":"<p>Available since: 0.15.0</p> <p>The selected fields are checked to see if they are present in the Spreadsheet file. If not defined, they will not be checked. example:</p> <pre><code>mandatoryFields: [\"product_ID\", \"quantity\"]`\n</code></pre>"},{"location":"pages/Configuration/#fieldmatchtype","title":"<code>fieldMatchType</code>","text":"<p>default: <code>labelTypeBrackets</code> Available since: Initial release</p> <p>Options:</p> <ul> <li><code>label</code></li> <li><code>labelTypeBrackets</code></li> </ul> <p>In some cases, the labels of different attributes may be identical to each other. In order to assign the correct labels and types, there is an option to make the type visible in the header. This way, a correct assignment can be made.</p> <p>Default (with <code>label</code>), the header columns would look like this: <code>ID, Birthday, First Name, Last Name</code> With <code>labelTypeBrackets</code>, the header columns would look like this: <code>ID[ID], Birthday[birth_day], First Name[FirstName], Last Name[LastName]</code></p>"},{"location":"pages/Configuration/#activatedraft","title":"<code>activateDraft</code>","text":"<p>default: <code>false</code> Available since: 0.5.0</p> <p>This option defines in draft scenarios whether a draft should be activated immediately or not. The option only defines whether the attempt should be started. If a draft activation is basically not possible, it will not be executed and may lead to errors. This is useful in a list report. If this option is set to <code>false</code>, all uploaded units have to be activated manually. Will be overwritten by the <code>createActiveEntity</code> option.</p> <p>Warning</p> <p>Draft Activation for OData V2 in OpenUI5 is not supported.</p>"},{"location":"pages/Configuration/#createactiveentity","title":"<code>createActiveEntity</code>","text":"<p>default: <code>false</code> Available since: 0.31.0</p> <p>This option defines whether the <code>IsActiveEntity</code> property should be inserted into the payload sent to the backend. In draft scenarios, you can use this option to create an active entity instead of a draft. Check if your backend system supports this.</p> <p>ABAP Backend</p> <p>There is no information about which backend OData implementation is supported, but a test with RAP on S/4HANA 2021 worked.</p> <p>CAP Backend</p> <p>The feature to support <code>IsActiveEntity</code> was introduced in <code>@sap/cds</code> Version <code>7.5.3</code>. https://cap.cloud.sap/docs/releases/changelog/#dec-23-added https://cap.cloud.sap/docs/releases/archive/2023/dec23#sapui5-mass-edit</p>"},{"location":"pages/Configuration/#when-to-use-activatedraft-or-createactiveentity","title":"When to use <code>activateDraft</code> or <code>createActiveEntity</code>","text":"<ul> <li><code>activateDraft</code>: First create a draft and then activate it in two separate requests.</li> <li><code>createActiveEntity</code>: Create an active entity directly.</li> </ul> <p>If you create a draft, the determinations are not triggered in the RAP framework, for example. These are only executed when creating directly. So if you now pass \"IsActiveEntity\", the entity is created directly and therefore the determinations are also executed.</p> <p>Of course, creating the draft entity and the subsequent activation takes longer because this is an additional network request.</p> <p>Together with the option <code>continueOnError</code>, it is also possible to create all entities and try to activate the other entities if the draft activation fails. This means that at least all drafts are available.</p>"},{"location":"pages/Configuration/#action","title":"<code>action</code>","text":"<p>default: <code>CREATE</code> Available since: 1.7.0</p> <p>Options:</p> <ul> <li><code>CREATE</code> : Create</li> <li><code>UPDATE</code> : Update</li> </ul>"},{"location":"pages/Configuration/#batchsize","title":"<code>batchSize</code>","text":"<p>default: <code>1.000</code> Available since: 0.11.0</p> <p>Options:</p> <ul> <li><code>0</code> : Payload will not be divided</li> </ul> <p>For large files, it is necessary to split batch requests and not to send them all at once. This <code>batchSize</code> option enables you to control the number of records processed in each batch request, which can help avoid memory issues and improve performance.</p> <p>When the number of lines in the Spreadsheet file exceeds the specified <code>batchSize</code>, the payload array is divided into equal parts, with each part containing the maximum number of lines specified by the <code>batchSize</code>. The application then processes each part separately, sending batch requests to the backend server.</p> <p>The default value is 1,000, which means that when the number of lines in the Spreadsheet file exceeds 1,000, the payload array will be divided into equal parts, and each part will be sent as a separate batch request.</p> <p>If you set the <code>batchSize</code> to 0, the payload array will not be divided, and the entire array will be sent as a single batch request.</p> <p>For updates, the batch size is limited to 100.</p>"},{"location":"pages/Configuration/#standalone","title":"<code>standalone</code>","text":"<p>default: <code>false</code> Available since: 0.13.0</p> <p>This option defines whether the plugin should be used in standalone mode or not. If this option is set to <code>true</code>, no table is searched, and therefore no context is needed. The mandatory parameter <code>context</code> and the parameter <code>tableId</code> are no longer necessary.</p> <p>If you want to use the template download function, you have to set the parameter <code>columns</code>, otherwise the <code>Download Template</code> button will not be displayed. The <code>payload</code> will be an array of objects with the keys named like the <code>columns</code> parameter.</p>"},{"location":"pages/Configuration/#configuration-parameters-not-compatible-with-standalone-mode","title":"Configuration Parameters Not Compatible with Standalone Mode","text":"<p>When using the component in standalone mode (<code>standalone: true</code>), the following configuration parameters will have no effect since no data is sent to a backend system:</p> Parameter Reason <code>context</code> Not needed in standalone mode as no binding context is required <code>tableId</code> Not needed as no table binding is used <code>odataType</code> Not applicable since no OData entity type is used <code>activateDraft</code> Not applicable since no draft handling is performed <code>createActiveEntity</code> Not applicable since no entity creation occurs <code>batchSize</code> Not used since no batches are sent to the backend <code>continueOnError</code> Not applicable since no backend communication occurs <code>action</code> CREATE/UPDATE operations are not performed against a backend <code>showBackendErrorMessages</code> No backend messages will be generated <code>bindingCustom</code> Not used as no OData binding is required <code>directUploadConfig</code> Direct file upload to backend is not performed <p>When in standalone mode, the spreadsheet data is simply parsed and made available to the application through the <code>uploadButtonPress</code> event.</p> <p>Example:</p> <pre><code>this.spreadsheetUpload.attachUploadButtonPress(function (event) {\n  const model = this.getModel('tableData');\n  model.setData(event.getParameter('payload'));\n}, this);\n</code></pre> <p>An example of an implementation to display data of a Spreadsheetupload in a freestyle app can be found here:</p> <p>UploadToTable.controller.js UploadToTable.view.xml</p>"},{"location":"pages/Configuration/#readallsheets","title":"<code>readAllSheets</code>","text":"<p>default: <code>false</code> Available since: 0.25.0</p> <p>This option defines whether all sheets in the Spreadsheet file should be read or not. If this option is set to <code>true</code>, the <code>payload</code> returns an additional parameter with the sheet name.</p> <p>You can access all the sheet names in the <code>uploadButtonPress</code> event.</p> <pre><code>this.spreadsheetUpload.attachUploadButtonPress(function (event) {\n  const model = this.getModel('tableData');\n  model.setData(event.getParameter('payload')); // &lt;-- example payload\n  event.preventDefault();\n}, this);\n</code></pre> <p>Example Payload:</p> <pre><code>[\n  {\n    \"product_ID\": {\n      \"rawValue\": 253,\n      \"sheetDataType\": \"n\",\n      \"format\": \"General\",\n      \"formattedValue\": \"253\",\n      \"sheetName\": \"Table1\"\n    },\n    \"username\": {\n      \"r\": \"&lt;t&gt;testUser&lt;/t&gt;\",\n      \"h\": \"testUser\",\n      \"rawValue\": \"testUser\",\n      \"sheetDataType\": \"s\",\n      \"format\": \"General\",\n      \"formattedValue\": \"testUser\",\n      \"sheetName\": \"Table1\"\n    }\n  },\n  {\n    \"product_ID\": {\n      \"rawValue\": 253,\n      \"sheetDataType\": \"n\",\n      \"format\": \"General\",\n      \"formattedValue\": \"253\",\n      \"sheetName\": \"Table2\"\n    },\n    \"username\": {\n      \"r\": \"&lt;t&gt;testUser&lt;/t&gt;\",\n      \"h\": \"testUser\",\n      \"rawValue\": \"testUser\",\n      \"sheetDataType\": \"s\",\n      \"format\": \"General\",\n      \"formattedValue\": \"testUser\",\n      \"sheetName\": \"Table2\"\n    }\n  }\n]\n</code></pre>"},{"location":"pages/Configuration/#readsheet","title":"<code>readSheet</code>","text":"<p>default: <code>0</code> Available since: 0.27.0</p> <p>By default, the first spreadsheet is read. With this option, you can specify which spreadsheet should be read with a number (0-based) or a name. If the name or number is not found, the first spreadsheet is read. Or you can set the option to <code>XXSelectorXX</code> to show a selector dialog to choose a sheet. If the option <code>readAllSheets</code> is set to <code>true</code>, this option is ignored.</p> <ul> <li><code>0</code> : First Sheet</li> <li><code>1</code> : Second Sheet</li> <li><code>Order</code> : Sheet with the name <code>Order</code></li> <li><code>Items</code> : Sheet with the name <code>Items</code></li> <li><code>XXSelectorXX</code> : Selector Dialog to choose a sheet</li> </ul>"},{"location":"pages/Configuration/#strict","title":"<code>strict</code>","text":"<p>default: <code>false</code> Available since: 0.16.0</p> <p>When strict is set to its default value (false), the \"Continue\" button is displayed in the error dialog, allowing users to proceed despite encountering errors in the uploaded data.</p> <p>This option defines whether the \"Continue\" button should be displayed in the error dialog or not. When set to true, the \"Continue\" button will not be displayed, and users must resolve the errors before proceeding with the next steps in the application.</p>"},{"location":"pages/Configuration/#decimalseparator","title":"<code>decimalSeparator</code>","text":"<p>default: Browser Default Available since: 0.17.0</p> <p>This option defines the decimal separator for numbers as a string. This option is only needed if there are numbers as strings in the Spreadsheet File or when importing a CSV. When the datatype in the Spreadsheet File is a number, the decimal separator is automatically recognized.</p>"},{"location":"pages/Configuration/#hidepreview","title":"<code>hidePreview</code>","text":"<p>default: <code>false</code> Available since: 0.17.0</p> <p>This option defines whether the button to preview the uploaded data in the table dialog should be hidden or not.</p>"},{"location":"pages/Configuration/#previewcolumns","title":"<code>previewColumns</code>","text":"<p>default: <code>[]</code> Available since: 0.31.0</p> <p>This option defines which columns should be shown in the preview dialog. This is an array of strings with the property names.</p>"},{"location":"pages/Configuration/#skipmandatoryfieldcheck","title":"<code>skipMandatoryFieldCheck</code>","text":"<p>default: <code>false</code> Available since: 0.17.0</p> <p>This option defines whether the mandatory fields defined in the metadata should be checked or not. Only the option <code>mandatoryFields</code> will be checked.</p>"},{"location":"pages/Configuration/#skipcolumnscheck","title":"<code>skipColumnsCheck</code>","text":"<p>default: <code>false</code> Available since: 0.29.0</p> <p>This option determines whether or not the columns in the Spreadsheet File should be verified. For instance, if there is a column named <code>Test column</code> in the Spreadsheet File, and this particular column name is absent from the metadata, an error will occur by default. However, if there are columns that are not being uploaded to the backend, you can configure this option to <code>true</code> in order to bypass the verification process.</p>"},{"location":"pages/Configuration/#skipmaxlengthcheck","title":"<code>skipMaxLengthCheck</code>","text":"<p>default: <code>false</code> Available since: 0.31.0</p> <p>This option determines whether or not the max length of the columns in the Spreadsheet File should be verified. If there is a <code>maxLength</code> defined in the metadata, the value in the Spreadsheet File will be checked.</p>"},{"location":"pages/Configuration/#showbackenderrormessages","title":"<code>showBackendErrorMessages</code>","text":"<p>default: <code>false</code> Available since: 0.18.0</p> <p>This option defines whether backend error messages should be displayed or not. In Fiori Elements scenarios, the error messages are displayed automatically. In FreeStyle scenarios, the error messages are not displayed automatically. If this option is set to <code>false</code>, only the error message <code>Error while uploading data</code> will be displayed.</p>"},{"location":"pages/Configuration/#showoptions","title":"<code>showOptions</code>","text":"<p>default: <code>false</code> Available since: 0.18.0</p> <p>This option defines whether the button to show the options dialog should be displayed or not. Currently, the menu is more for the development process. Later, this should also be able to be used by the user. There are also only a few selected configurations available.</p>"},{"location":"pages/Configuration/#availableoptions","title":"<code>availableOptions</code>","text":"<p>Available since: 0.20.0</p>"},{"location":"pages/Configuration/#showdownloadbutton","title":"<code>showDownloadButton</code>","text":"<p>default: <code>false</code> Available since: Initial release</p> <p>This option defines whether the button to download data should be displayed or not. More information can be found in the Spreadsheet Deep Download documentation.</p>"},{"location":"pages/Configuration/#available-options","title":"Available Options","text":"<ul> <li><code>strict</code></li> <li><code>fieldMatchType</code></li> <li><code>decimalSeperator</code></li> </ul> <p>This Option defines which option the user can influence.</p>"},{"location":"pages/Configuration/#useimportwizard","title":"<code>useImportWizard</code>","text":"<p>default: <code>false</code> Available since: 2.1.0</p> <p>This option enables the wizard-based import dialog instead of the traditional single-step dialog. The wizard provides a guided, step-by-step interface that automatically progresses through upload, header validation, error handling, and data preview steps.</p> <p>The wizard offers several advantages:</p> <ul> <li>Enhanced User Experience: Step-by-step guidance with clear visual progress</li> <li>Automatic Step Progression: Smart routing based on file validation results</li> <li>Better Error Handling: Dedicated error and message steps with recovery options</li> <li>Header Validation: Interactive header selection when automatic detection fails</li> <li>Data Preview: Final preview step before import confirmation</li> </ul> <p>Example:</p> <pre><code>&lt;core:ComponentContainer\n  usage=\"spreadsheetImporter\"\n  settings=\"{\n        useImportWizard: true,\n        debug: true,\n        createActiveEntity: true\n    }\"\n/&gt;\n</code></pre> <p>When enabled, you can open the wizard using either:</p> <ul> <li>The automatic button (when <code>componentContainerData</code> is configured)</li> <li>Programmatically using <code>openWizard()</code> method</li> <li>The existing <code>openSpreadsheetUploadDialog()</code> method (automatically routes to wizard)</li> </ul> <p>For detailed wizard usage and examples, see Wizard Documentation.</p>"},{"location":"pages/Configuration/#hidesampledata","title":"<code>hideSampleData</code>","text":"<p>default: <code>false</code> Available since: 0.20.0</p> <p>This option defines whether the template file should be empty and not have any sample data. This will overwrite the <code>sampleData</code> option.</p>"},{"location":"pages/Configuration/#sampledata","title":"<code>sampleData</code>","text":"<p>default: Using generated sample data Available since: 0.22.0</p> <p>This option defines the sample data that is displayed in the template file. If no sample data is defined, the sample data is generated automatically. Add an object array using the property names as attributes. Only sample data will be visible in the template file, no other generated data.</p> <p>Example:</p> <pre><code>sampleData: [\n  {\n    product_ID: 'HT-1000',\n    quantity: 1,\n    title: 'Notebook Basic 15',\n    price: 956,\n    validFrom: new Date(),\n    timestamp: new Date(),\n    date: new Date(),\n    time: new Date(),\n    boolean: true,\n    decimal: '1.1'\n  }\n];\n</code></pre>"},{"location":"pages/Configuration/#spreadsheettemplatefile","title":"<code>spreadsheetTemplateFile</code>","text":"<p>default: <code>\"\"</code> Available since: 0.29.0</p> <p>possible values:</p> <ul> <li>local file in the application</li> <li>URL to file</li> <li>ArrayBuffer</li> </ul> <p>By default, the template is generated with all properties or those defined in the <code>columns</code> option. If you want to use your own template file, you can use this option to add columns that are not being uploaded to the backend. It is recommended to use the <code>skipColumnsCheck</code> option in this case; otherwise, you will get errors.</p> <p>For the local file or URL, the filename is used for the download. The config <code>spreadsheetFileName</code> will overwrite this. The config <code>spreadsheetFileName</code> will be used for ArrayBuffer value.</p> <p>Example:</p> <p>local file in the application</p> <p>It will use <code>sap.ui.require.toUrl</code> to get the file. So make sure use the correct path, including the namespace of your application. Here the namespace is <code>ui.v4.ordersv4fe</code>, and the file is located in the <code>webapp/ext</code> folder.</p> <p><code>spreadsheetTemplateFile: \"ui/v4/ordersv4fe/ext/ListReportOrdersTemplate.xlsx\"</code></p> <p>URL to file</p> <p><code>spreadsheetTemplateFile: \"https://example.com/ListReportOrdersTemplate.xlsx\"</code></p> <p>ArrayBuffer</p> <pre><code>const path = 'https://example.com/ListReportOrdersTemplate.xlsx';\n\nconst response = await fetch(sPath);\nif (!response.ok) {\n  throw new Error('Network response was not ok ' + response.statusText);\n}\nconst arrayBuffer = await response.arrayBuffer();\n\n// prettier-ignore\nthis.spreadsheetUpload = await this.editFlow.getView()\n        .getController()\n        .getAppComponent()\n        .createComponent({\n            usage: \"spreadsheetImporter\",\n            async: true,\n            componentData: {\n                context: this,\n                spreadsheetTemplateFile: arrayBuffer\n            }\n        });\n</code></pre>"},{"location":"pages/Configuration/#usetableselector","title":"<code>useTableSelector</code>","text":"<p>default: <code>false</code> Available since: 0.23.0</p> <p>This option defines whether the Table Selector should be used or not. If set to true and multiple tables in the view, the user can choose the table to upload the data to. It is also possible to set different options for each table (see TableSelector)</p>"},{"location":"pages/Configuration/#spreadsheetrowpropertyname","title":"<code>spreadsheetRowPropertyName</code>","text":"<p>Available since: 0.30.0</p> <p>If you want to send the spreadsheet row to the backend, you can define a property name here. When the property name is defined, the payload will include the spreadsheet row as an integer with the defined property name.</p>"},{"location":"pages/Configuration/#componentcontainerdata","title":"<code>componentContainerData</code>","text":"<p>Available since: 0.26.0</p> <p>The ComponentContainer is a special control that can be used to embed the spreadsheet importer in a view without the need to instantiate it in the controller. These are special options that can be used in the ComponentContainer.</p>"},{"location":"pages/Configuration/#configuration","title":"Configuration","text":"<p>For the event, the method from your view controller is attached to the event.</p> Option Description Details <code>buttonText</code> Text to be displayed on the button string <code>buttonId</code> Id of the button string <code>buttonIcon</code> Icon of the button like <code>sap-icon://download</code> string <code>downloadButton</code> Defines whether the download event should be triggered instead of the upload event boolean <code>uploadButtonPress</code> Event after the upload button is pressed string <code>changeBeforeCreate</code> Event before data sent to the backend string <code>checkBeforeRead</code> Event before data is uploaded to the app string"},{"location":"pages/Configuration/#example","title":"Example","text":"<p>The method name in my controller belongs to the view and is called <code>uploadButtonPress</code>.</p> <pre><code>&lt;core:ComponentContainer\n  width=\"100%\"\n  usage=\"spreadsheetImporter\"\n  propagateModel=\"true\"\n  async=\"true\"\n  settings=\"{\n  standalone:true,\n  columns: ['product_ID', 'username'],\n  deepDownloadConfig:{\n    deepLevel: 2,\n    deepExport: true,\n    addKeysToExport: true,\n    showOptions: true,\n    filename: 'Orders12',\n    columns : {\n        'OrderNo':{\n            'order': 1\n        }\n    }\n  },\n  componentContainerData:{\n    uploadButtonPress:'uploadButtonPress',\n    buttonText:'Excel Upload',\n    downloadButton:true\n    }\n  }\"\n/&gt;\n</code></pre>"},{"location":"pages/Configuration/#bindingcustom","title":"<code>bindingCustom</code>","text":"<p>default: Not specified Available since: 1.3.0</p> <p>This option allows you to provide custom binding settings for the component. It can be used to override default behavior to search for a table and to use the binding of the table. Binding must be a OData binding, either V2 or V4.</p> <p>example:</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      createActiveEntity: false,\n      i18nModel: this.getModel('i18n'),\n      bindingCustom: this.getView().byId('ui.v4.ordersv4fe::OrdersList--fe::table::Orders::LineItem-innerTable').getBinding('items')\n    }\n  });\n</code></pre>"},{"location":"pages/Configuration/#i18nmodel","title":"<code>i18nModel</code>","text":"<p>Available since: 0.33.0</p> <p>You can use your own i18n model to overwrite texts.</p> <p>You can see all the available texts in the i18n files.</p> <p>You don't have to overwrite all texts, only the ones you want to change. If you don't overwrite a text, the default text will be used.</p> <p>Example:</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      i18nModel: this.getModel('i18n')\n    }\n  });\n</code></pre>"},{"location":"pages/Configuration/#continueonerror","title":"<code>continueOnError</code>","text":"<p>default: <code>false</code> Available since: 0.30.0</p> <p>This option defines whether the batch processing should continue if an error occurs. If you have, for example, set <code>batchSize</code> to 2 and have 4 rows, and an error occurs in the first batch of two rows, the processing will stop. If you set this flag to <code>true</code>, the processing will continue, and the second batch of two rows will be processed. This may lead to errors in the backend because the first batch of two rows was not processed correctly. Use this option with caution.</p>"},{"location":"pages/Configuration/#debug","title":"<code>debug</code>","text":"<p>default: <code>false</code> Available since: 0.19.0</p> <p>This option defines whether the debug mode should be activated or not. If set to true, it will set the log level to <code>debug</code> (Log.Level.DEBUG) and activate the options menu with all available options.</p>"},{"location":"pages/Configuration/#readsheetcoordinates","title":"<code>readSheetCoordinates</code>","text":"<p>default: <code>\"A1\"</code> Available since: 1.2.0</p> <p>This option allows you to specify a starting cell (in Excel A1 notation) for reading data from the spreadsheet. Use this when your data doesn't start at cell A1, for example when the spreadsheet has title headers or metadata in the first few rows.</p> <p>The starting cell indicates where the column headers are located. Data rows are expected to start from the next row after the header row. For example, if <code>readSheetCoordinates</code> is set to <code>\"C3\"</code>, the component will:</p> <ul> <li>Look for column headers in row 3, starting from column C</li> <li>Start reading data from row 4, starting from column C</li> </ul> <p>This is useful when:</p> <ul> <li>Your spreadsheet has header information above the actual column headers</li> <li>The data doesn't start at the top-left corner of the sheet</li> <li>You want to skip rows or columns at the beginning</li> <li>You're working with spreadsheets that have complex layouts or multiple tables on a single sheet</li> </ul>"},{"location":"pages/Configuration/#visual-example","title":"Visual Example","text":"<p>When <code>readSheetCoordinates</code> is set to <code>\"C3\"</code>:</p> <pre><code>    A   B   C       D       E       F\n1           Company data report\n2           Generated: 2023-04-02\n3           ID      Name    Price   Status\n4           1001    Item A  12.50   Active\n5           1002    Item B  25.00   Inactive\n</code></pre> <p>The component will read:</p> <ul> <li>Headers from row 3, cells C3-F3: \"ID\", \"Name\", \"Price\", \"Status\"</li> <li>Data starting from row 4, cells C4-F4: \"1001\", \"Item A\", etc.</li> </ul> <p>example:</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      readSheetCoordinates: 'C3' // Start reading from cell C3\n    }\n  });\n</code></pre>"},{"location":"pages/Configuration/#skipemptyheaderscheck","title":"<code>skipEmptyHeadersCheck</code>","text":"<p>default: <code>false</code> Available since: 1.2.0</p> <p>This option determines whether the component should check for empty headers (columns with names like <code>__EMPTY</code> or <code>__EMPTY_1</code>) in the spreadsheet data. This checks in general the correct parsing of the data and will show a warning with a hint about the expected starting cell for headers (based on readSheetCoordinates or \"A1\" if not specified).</p> <p>When importing spreadsheets, empty columns sometimes get included in the import, which can cause confusion or data mapping issues. By default, the component will detect these empty headers and display a warning message that includes information about:</p> <ul> <li>Which empty columns were detected</li> <li>The expected starting cell for headers (based on readSheetCoordinates)</li> <li>The expected starting cell for data rows</li> </ul> <p>If you set this option to <code>true</code>, the component will not perform this check and will not show warnings about empty columns.</p> <p>example:</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      readSheetCoordinates: 'B2', // Start reading from cell B2\n      skipEmptyHeadersCheck: true // Skip empty header checks\n    }\n  });\n</code></pre>"},{"location":"pages/Configuration/#enablepaste","title":"<code>enablePaste</code>","text":"<p>default: <code>true</code> Available since: 2.3.0</p> <p>This option controls whether the paste functionality is enabled for both data and files. When enabled, users can:</p> <ul> <li>Copy spreadsheet data from Excel/Google Sheets and paste it directly into the dialog (Ctrl+V)</li> <li>Copy .xlsx files from their file system and paste them into the dialog</li> <li>Use the paste functionality in both the classic upload dialog and the wizard mode</li> </ul> <p>When disabled, users can only upload files through the traditional file browser or drag &amp; drop methods.</p> <p>example:</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      enablePaste: false // Disable paste functionality\n    }\n  });\n</code></pre>"},{"location":"pages/Configuration/#example-code","title":"Example Code","text":""},{"location":"pages/Configuration/#all-options","title":"All options","text":"<p>You can assign all the options when creating the component.</p> <pre><code>this.spreadsheetUpload = await this.getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      tableId: 'ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Items::LineItem-innerTable',\n      columns: ['product_ID', 'quantity', 'title', 'price', 'validFrom', 'timestamp', 'date', 'time', 'boolean', 'decimal'],\n      mandatoryFields: ['product_ID', 'quantity'],\n      spreadsheetFileName: 'Test.xlsx',\n      odataType: 'com.sap.gateway.srvd.zui_mr_create_run.v0001.AbleseauftragType',\n      fieldMatchType: 'label',\n      activateDraft: false,\n      batchSize: 1000,\n      standalone: false,\n      strict: false,\n      decimalSeparator: ',',\n      hidePreview: false,\n      skipMandatoryFieldCheck: false,\n      showBackendErrorMessages: false,\n      showOptions: false,\n      availableOptions: ['strict', 'fieldMatchType', 'decimalSeperator'],\n      hideSampleData: false,\n      debug: false,\n      enablePaste: true\n    }\n  });\n</code></pre>"},{"location":"pages/Configuration/#change-options-after-creating-the-component","title":"Change options after creating the component","text":"<p>You can also change the options after creating the component or pass them to the <code>openSpreadsheetUploadDialog</code> method.</p> <pre><code>const options = {\n  context: this,\n  tableId: 'ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Shipping::LineItem-innerTable'\n};\nthis.spreadsheetUploadTableShipping = await this.editFlow.getView().getController().getAppComponent().createComponent({\n  usage: 'spreadsheetImporter',\n  async: true\n});\nthis.spreadsheetUploadTableShipping.setBatchSize(500);\nthis.spreadsheetUploadTableShipping.openSpreadsheetUploadDialog(options);\n</code></pre> <p>You can also just change a subset of the options or overwrite them.</p> <pre><code>const options = {\n  tableId: 'ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Shipping::LineItem-innerTable',\n  hidePreview: true,\n  skipMandatoryFieldCheck: true\n};\nthis.spreadsheetUploadTableShipping = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      hidePreview: false\n    }\n  });\nthis.spreadsheetUploadTableShipping.setBatchSize(500);\nthis.spreadsheetUploadTableShipping.openSpreadsheetUploadDialog(options);\n</code></pre>"},{"location":"pages/Events/","title":"Events","text":"<p>The following events can be used as extension points to intervene and manipulate data:</p> Event Description Available since <code>preFileProcessing</code> Execute custom logic before processing the spreadsheet file starts 1.2.0 <code>checkBeforeRead</code> Check data before it is uploaded to the UI5 Initial release <code>changeBeforeCreate</code> Change data before it is sent to the backend Initial release <code>requestCompleted</code> Event when the request is completed 0.28.0 <code>uploadButtonPress</code> Fired when the <code>Upload</code> button is pressed, possible to prevent data from being sent to the backend 0.13.0 <code>beforeDownloadFileProcessing</code> Fired before the data is converted to a spreadsheet file 1.5.0 <code>beforeDownloadFileExport</code> Fired just before the file is downloaded 1.5.0 <p>You can attach async functions to the events by wrapping the function in a <code>Promise</code>. See Attach async functions to events for more information.</p>"},{"location":"pages/Events/#event-prefileprocessing","title":"Event <code>preFileProcessing</code>","text":"<p>When the file is uploaded to the app, the <code>preFileProcessing</code> event is fired. Use this event to execute custom logic before processing the spreadsheet file starts. The <code>file</code> is available in the event and can be manipulated. If you want to prevent the processing of the file, call the <code>preventDefault</code> method of the event. If you want to change the file that will be processed, return the new file.</p>"},{"location":"pages/Events/#example","title":"Example","text":"<pre><code>this.spreadsheetUpload.attachPreFileProcessing(function (event) {\n  // example\n  let file = event.getParameter('file');\n  if (file.name.endsWith('.txt')) {\n    // prevent processing of file\n    event.preventDefault();\n    // show custom ui5 error message\n    new MessageToast.show('File with .txt extension is not allowed');\n    // change the file that will be processed\n    // Create a Blob with some text content\n    const blob = new Blob(['This is some dummy text content'], { type: 'text/plain' });\n    // Create a File object from the Blob\n    const file2 = new File([blob], 'TEXT.txt', { type: 'text/plain' });\n    return file2;\n  }\n});\n</code></pre>"},{"location":"pages/Events/#event-checkbeforeread","title":"Event <code>checkBeforeRead</code>","text":"<p>When the file is uploaded to the app, the <code>checkBeforeRead</code> event is fired.</p>"},{"location":"pages/Events/#example_1","title":"Example","text":"<p>This sample is from the sample app. It checks whether the price is over 100.</p> <pre><code>this.spreadsheetUpload.attachCheckBeforeRead(function (event) {\n  // example\n  const sheetdata = event.getParameter('sheetData');\n  let errorArray = [];\n  for (const [index, row] of sheetData.entries()) {\n    // Check for invalid price\n    for (const key in row) {\n      if (key.endsWith('[price]') &amp;&amp; row[key].rawValue &gt; 100) {\n        const error = {\n          title: 'Price too high (max 100)',\n          row: index + 2,\n          group: true,\n          rawValue: row[key].rawValue,\n          ui5type: 'Error'\n        };\n        errorArray.push(error);\n      }\n    }\n  }\n  event.getSource().addArrayToMessages(errorArray);\n}, this);\n</code></pre> <p>You can add errors to the <code>messages</code> property of the <code>SpreadsheetUpload</code> control. After the event, the upload is canceled and the errors are displayed in the error dialog. Use the <code>addArrayToMessages</code> method to add errors to the <code>messages</code> property. It expects an array of objects with the following properties:</p> <ul> <li><code>title</code> - the title of the error</li> <li><code>row</code> - the row number of the error</li> <li><code>group</code> - set to <code>true</code> or <code>false</code> to group the errors by title</li> <li><code>rawValue</code> - the raw value of the data from the spreadsheet</li> <li><code>ui5type</code> - the type of the error, can be <code>Error</code>, <code>Warning</code>, <code>Success</code>, <code>Information</code> or <code>None</code> from the `MessageType enum</li> </ul> <p>Errors with the same title will be grouped.</p> <p></p>"},{"location":"pages/Events/#event-changebeforecreate","title":"Event <code>changeBeforeCreate</code>","text":"<p>When the <code>Upload</code> button is pressed, the <code>changeBeforeCreate</code> event is fired. Use this event to manipulate the data before it is sent to the backend. The event expects a payload object to be returned. Make sure only one handler is attached to this event. If multiple handlers are attached, only the first payload will be used.</p>"},{"location":"pages/Events/#example_2","title":"Example","text":"<p>This sample is from the sample app. It overwrites the payload.</p> <pre><code>this.spreadsheetUpload.attachChangeBeforeCreate(function (event) {\n  let payload = event.getParameter('payload');\n  // round number from 12,56 to 12,6\n  if (payload.price) {\n    payload.price = Number(payload.price.toFixed(1));\n  }\n  return payload;\n}, this);\n</code></pre>"},{"location":"pages/Events/#event-requestcompleted","title":"Event <code>requestCompleted</code>","text":"<p>When the request is completed, the <code>requestCompleted</code> event is fired. Use the <code>success</code> parameter to check if the request was successful.</p>"},{"location":"pages/Events/#example_3","title":"Example","text":"<pre><code>this.spreadsheetUpload.attachRequestCompleted(function (event) {\n  const success = event.getParameter('success');\n  if (success) {\n    console.log('Request Completed');\n  } else {\n    console.log('Request Failed');\n  }\n}, this);\n</code></pre>"},{"location":"pages/Events/#event-uploadbuttonpress","title":"Event <code>uploadButtonPress</code>","text":"<p>When the <code>Upload</code> button is pressed, the <code>uploadButtonPress</code> event is fired. The event is fired before the <code>changeBeforeCreate</code> event. Prevent the data from being sent to the backend by calling the <code>preventDefault</code> method of the event.</p>"},{"location":"pages/Events/#example-1","title":"Example 1","text":"<pre><code>this.spreadsheetUpload.attachUploadButtonPress(function (event) {\n  // Prevent data from being sent to the backend\n  event.preventDefault();\n  // Get payload\n  const payload = event.getParameter('payload');\n}, this);\n</code></pre>"},{"location":"pages/Events/#example-2","title":"Example 2","text":"<p>You can also use this event to sent the data to the backend and add possible errors to the component. Use the <code>addArrayToMessages</code> method to add errors. It will display the errors in the error dialog after the execution of the event.</p> <pre><code>this.spreadsheetUpload.attachUploadButtonPress(async function (event) {\n  event.preventDefault();\n\n  event.getSource().addArrayToMessages([\n    {\n      title: 'Error on creating',\n      group: false,\n      ui5type: 'Error'\n    }\n  ]);\n\n  // simulate async call\n  await new Promise(resolve =&gt; {\n    // Wait for 2 seconds\n    setTimeout(() =&gt; {\n      resolve();\n    }, 2000);\n  });\n\n  // Code here will execute after the 2-second wait\n}, this);\n</code></pre>"},{"location":"pages/Events/#event-beforedownloadfileprocessing","title":"Event <code>beforeDownloadFileProcessing</code>","text":"<p>Parameters:</p> <ul> <li><code>data</code>- the data that will be converted to a spreadsheet file, the data is always the <code>$XYZData</code> property of the data object</li> </ul> <p>This event is fired before the data is converted to a spreadsheet file. Use this event to manipulate the data before it is converted. You can change directly the data parameter of the event as this is a reference to the data.</p>"},{"location":"pages/Events/#example_4","title":"Example","text":"<pre><code>onDownload: async function () {\n    // init your spreadsheet upload component\n    this.spreadsheetUpload.attachBeforeDownloadFileProcessing(this.onBeforeDownloadFileProcessing, this);\n    this.spreadsheetUpload.triggerDownloadSpreadsheet();\n},\n\nonBeforeDownloadFileProcessing: function (event) {\n    const data = event.getParameters().data;\n    // change buyer of first row of the root entity\n    data.$XYZData[0].buyer = \"Customer 123\";\n    // change quantity of first row of the Items entity\n    data.Items.$XYZData[0].quantity = 4\n}\n</code></pre>"},{"location":"pages/Events/#event-beforedownloadfileexport","title":"Event <code>beforeDownloadFileExport</code>","text":"<p>Parameters:</p> <ul> <li><code>workbook</code> - the SheetJS workbook object</li> <li><code>filename</code> - the filename of the file that will be downloaded</li> </ul> <p>This event is fired just before the file is downloaded. Use this event to manipulate the filename or other parameters before the file is downloaded.</p>"},{"location":"pages/Events/#example_5","title":"Example","text":"<pre><code>onDownload: async function () {\n    // init your spreadsheet upload component\n    this.spreadsheetUpload.attachBeforeDownloadFileExport(this.onBeforeDownloadFileExport, this);\n    this.spreadsheetUpload.triggerDownloadSpreadsheet();\n},\n\nonBeforeDownloadFileExport: function (event) {\n\n    const workbook = event.getParameters().workbook;\n    event.getParameters().filename = filename + \"_modified\";\n}\n</code></pre>"},{"location":"pages/Events/#attach-async-functions-to-events","title":"Attach async functions to events","text":"<p>You can attach async functions to the events by wrapping the function in a <code>Promise</code>. This allows you to send a request to the backend for checks that are not possible in the frontend, for example with a function import.</p> <pre><code>// Init spreadsheet upload\nthis.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      activateDraft: true\n    }\n  });\n\n// Event to check before uploading to app\nthis.spreadsheetUpload.attachCheckBeforeRead(async function (event) {\n  return new Promise(async (resolve, reject) =&gt; {\n    // Example\n    console.log('Start async wait');\n    await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n    console.log('End async wait');\n    // Don't forget to resolve the promise\n    resolve();\n  });\n}, this);\n</code></pre>"},{"location":"pages/Events/#validate-the-data-in-the-backend-with-rapcap-before-creating-the-entity","title":"Validate the data in the backend with RAP/CAP before creating the entity","text":"<p>As explained above, your are able to use async functions to validate the data. Using this approach, you are able to validate the data in the backend with Actions before creating the entity.</p>"},{"location":"pages/Events/#validating-with-cap-backend-actions","title":"Validating with CAP Backend Actions","text":"<p>You can implement backend validation using an unbound action in CAP (Cloud Application Programming model) to check data before it gets saved. You can find the files here:</p> <ul> <li>schema.cds</li> <li>orders-service.cds</li> <li>orders-service.js</li> <li>ObjectPageExtController.js</li> </ul> <p>Here's a complete implementation example:</p>"},{"location":"pages/Events/#1-define-the-action-in-schemacds","title":"1. Define the Action in schema.cds","text":"<pre><code>// Define action input type\ntype ShippingDetailCheck {\n  city    : String;\n  address : String;\n  row     : Integer;\n}\n\n// Define action return type\ntype ShippingDetailResult {\n  title      : String;\n  row        : Integer;\n  group      : Boolean;\n  rawValue   : String;\n  ui5type: String;\n  value      : String;\n}\n\n// Add the action\naction checkShippingDetails(shippingDetails : many ShippingDetailCheck) returns {\n  value : many ShippingDetailResult\n};\n</code></pre>"},{"location":"pages/Events/#2-expose-the-action-in-your-service-orders-servicecds","title":"2. Expose the Action in Your Service (orders-service.cds)","text":"<pre><code>service OrdersService {\n  entity Orders as projection on my.Orders;\n  entity OrderItems as projection on my.OrderItems;\n  // ... other entity definitions\n\n  // Unbound action to check shipping details against product titles\n  action checkShippingDetails(shippingDetails : many my.ShippingDetailCheck) returns {\n    value : many my.ShippingDetailResult\n  };\n}\n</code></pre>"},{"location":"pages/Events/#3-implement-the-action-handler-orders-servicejs","title":"3. Implement the Action Handler (orders-service.js)","text":"<pre><code>const cds = require('@sap/cds');\nclass OrdersService extends cds.ApplicationService {\n  /** register custom handlers */\n  init() {\n    const { OrderItems } = this.entities;\n\n    // Register action handler for checking shipping details\n    this.on('checkShippingDetails', async req =&gt; {\n      const { shippingDetails } = req.data;\n      const errors = [];\n\n      // Process each shipping detail entry\n      for (const shippingDetail of shippingDetails) {\n        const { city, row } = shippingDetail;\n\n        if (city) {\n          try {\n            // Query order items to see if city name is used in any product title\n            const orderItems = await SELECT.from(OrderItems).where(`title like '%${city}%'`);\n\n            if (orderItems &amp;&amp; orderItems.length &gt; 0) {\n              // Create error for city found in product titles\n              errors.push({\n                title: `City \"${city}\" found in product title`,\n                row: row || 0,\n                group: true,\n                rawValue: city,\n                messageType: 'Warning',\n                value: city\n              });\n            }\n          } catch (error) {\n            console.error('Error in city check:', error);\n            errors.push({\n              title: `Error checking city \"${city}\"`,\n              row: row || 0,\n              group: true,\n              rawValue: city,\n              messageType: 'Error',\n              value: city\n            });\n          }\n        }\n      }\n\n      // Return the list of errors/warnings\n      return { value: errors };\n    });\n\n    return super.init();\n  }\n}\nmodule.exports = OrdersService;\n</code></pre>"},{"location":"pages/Events/#4-call-the-action-from-the-frontend-objectpageextcontrollerjs","title":"4. Call the Action from the Frontend (ObjectPageExtController.js)","text":"<pre><code>this.spreadsheetUploadTableShipping.attachCheckBeforeRead(async function (event) {\n  return new Promise(async (resolve, reject) =&gt; {\n    try {\n      // Show busy state in the upload dialog\n      const eventParameters = event.getParameters();\n      const source = event.getSource();\n      const uploadDialog = source.spreadsheetUpload.getSpreadsheetUploadDialog();\n      uploadDialog.setBusyIndicatorDelay(0);\n      uploadDialog.setBusy(true);\n\n      // Get the parsed data from the spreadsheet\n      const parsedData = eventParameters['parsedData'];\n\n      // Prepare shipping details to be checked by the backend\n      const shippingDetails = [];\n      for (const [index, row] of parsedData.entries()) {\n        if (row.city) {\n          shippingDetails.push({\n            city: row.city,\n            address: row.address || '',\n            row: index + 2 // Adjust for header row and zero-indexing\n          });\n        }\n      }\n\n      // Skip check if no shipping details with cities are present\n      if (shippingDetails.length === 0) {\n        uploadDialog.setBusy(false);\n        resolve();\n        return;\n      }\n\n      // Get the model and call the unbound action\n      const model = this.getModel();\n      const actionBinding = model.bindContext('/OrdersService/checkShippingDetails(...)');\n      actionBinding.setParameter('shippingDetails', shippingDetails);\n\n      try {\n        await actionBinding.execute();\n\n        // Get the result from the action\n        const actionResult = actionBinding.getBoundContext().getObject();\n\n        // Add errors to the spreadsheet uploader component to be displayed\n        if (actionResult &amp;&amp; actionResult.value &amp;&amp; actionResult.value.length &gt; 0) {\n          source.addArrayToMessages(actionResult.value);\n        }\n      } catch (actionError) {\n        console.error('Error executing action:', actionError);\n        source.addArrayToMessages([\n          {\n            title: 'Error checking city names',\n            row: 0,\n            group: true,\n            rawValue: 'Error in backend check',\n            ui5type: 'Error'\n          }\n        ]);\n      }\n\n      uploadDialog.setBusy(false);\n    } catch (error) {\n      console.error('Error during city check:', error);\n      const uploadDialog = event.getSource().spreadsheetUpload.getSpreadsheetUploadDialog();\n      if (uploadDialog) {\n        uploadDialog.setBusy(false);\n      }\n    }\n\n    // Important! Don't forget to resolve the promise\n    resolve();\n  });\n}, this);\n</code></pre>"},{"location":"pages/Events/#validating-with-rap-backend-actions","title":"Validating with RAP Backend Actions","text":"<p>For SAP S/4HANA or BTP ABAP environments, you can use the RAP (RESTful ABAP Programming) model to implement similar validations using unbound actions.</p> <p>Warning</p> <p>This is just sample code to show how it could be done. It is not tested and might not work as expected.</p>"},{"location":"pages/Events/#1-define-the-action-in-behavior-definition","title":"1. Define the Action in Behavior Definition","text":"<pre><code>define behavior for ZI_OrderDocument alias Order\n{\n  // ... other behavior definitions\n\n  action checkCityNames deep parameter ZI_CITY_CHECK_ROOT\n    result [0..*] ZI_CITY_CHECK_RETURN;\n\n  // ... other behavior definitions\n}\n</code></pre>"},{"location":"pages/Events/#2-implement-the-action-handler-in-behavior-implementation-class","title":"2. Implement the Action Handler in Behavior Implementation Class","text":"<pre><code>METHOD checkCityNames.\n  \"----------------------------------------------------------------------\n  \" Description: Check city names against product titles\n  \"----------------------------------------------------------------------\n\n  DATA: lr_validator TYPE REF TO zcl_city_validator,\n        lv_isdraft   TYPE abp_behv_flag.\n\n  DATA(lv_guid) = keys[ 1 ]-Guid.\n  DATA(shipping_details) = keys[ 1 ]-%param-_shipping.\n  lr_validator = NEW #(  ).\n\n  \"Take over draft mode\n  lv_isdraft = keys[ 1 ]-%is_draft.\n\n  \"Read order data\n  READ ENTITIES OF ZI_OrderDocument IN LOCAL MODE\n  ENTITY Order\n  ALL FIELDS WITH VALUE #( ( Guid = lv_guid\n                           %is_draft = lv_isdraft ) )\n  RESULT DATA(lt_order).\n\n  IF lines( lt_order ) NE 1.\n    \" Return error if order not found\n    APPEND VALUE #( guid = lv_guid\n       %param = VALUE zi_city_check_return(\n                     row_number = 0\n                     title = 'Order not found'\n                     messageType = 'E'\n                     value = space ) ) TO result.\n    RETURN.\n  ENDIF.\n\n  \" Loop through all shipping details from Excel\n  LOOP AT shipping_details ASSIGNING FIELD-SYMBOL(&lt;detail&gt;).\n    \" Extract city name\n    DATA(lv_city) = &lt;detail&gt;-city.\n\n    IF lv_city IS NOT INITIAL.\n      \" Check if city exists in any product titles\n      SELECT COUNT(*)\n        FROM zorderitems\n        WHERE title LIKE '%' &amp;&amp; lv_city &amp;&amp; '%'\n        INTO @DATA(lv_count).\n\n      IF lv_count &gt; 0.\n        \" Add warning if city is found in product titles\n        APPEND VALUE #( guid = lv_guid\n          %param = VALUE zi_city_check_return(\n            row_number = &lt;detail&gt;-row_number\n            title = |City \"{ lv_city }\" found in product title|\n            messageType = 'W'\n            value = lv_city ) ) TO result.\n      ENDIF.\n\n      \" Additional validations can be added here\n      \" For example, check address format, postal code validity, etc.\n      lr_validator-&gt;check_address_format(\n        EXPORTING\n          iv_address = &lt;detail&gt;-address\n          iv_city    = lv_city\n          iv_row     = &lt;detail&gt;-row_number\n        CHANGING\n          ct_result  = result\n      ).\n    ENDIF.\n  ENDLOOP.\nENDMETHOD.\n</code></pre>"},{"location":"pages/Events/#3-call-the-action-from-frontend","title":"3. Call the Action from Frontend","text":"<pre><code>this.spreadsheetUpload.attachCheckBeforeRead(async oEvent =&gt; {\n  return new Promise(async (resolve, reject) =&gt; {\n    const eventParameter = oEvent.getParameters();\n    const source = oEvent.getSource();\n    const uploadDialog = source.spreadsheetUpload.getSpreadsheetUploadDialog();\n    uploadDialog.setBusyIndicatorDelay(0);\n    uploadDialog.setBusy(true);\n\n    try {\n      const parsedData = eventParameter['parsedData'];\n\n      // Prepare shipping details to be checked by the backend\n      const shippingDetails = [];\n      for (const [index, row] of parsedData.entries()) {\n        if (row.city) {\n          shippingDetails.push({\n            city: row.city,\n            address: row.address || '',\n            postal_code: row.postalCode || '',\n            country: row.country || '',\n            row_number: row.__rowNum__ + 1 // Add 1 to account for header row\n          });\n        }\n      }\n\n      // Skip check if no shipping details with cities are present\n      if (shippingDetails.length === 0) {\n        uploadDialog.setBusy(false);\n        resolve();\n        return;\n      }\n\n      // Prepare action parameter structure\n      const actionParameterObject = { _shipping: shippingDetails };\n\n      // Get context and create action\n      const context = this.getBindingContext();\n      const action = this.getModel().bindContext('com.sap.gateway.srvd.orders.v0001.checkCityNames(...)', context);\n\n      // Add shipping details as parameters to the action\n      action.setParameter('_shipping', shippingDetails);\n\n      // Execute the action and wait for the result\n      await action.execute();\n\n      // Get results of the backend checks\n      const actionResult = action.getBoundContext().getObject();\n      let errorsArray = [];\n\n      for (const [index, row] of actionResult.value.entries()) {\n        const error = {\n          title: row.title,\n          row: row.row_number,\n          group: true,\n          rawValue: row.value,\n          ui5type: row.messageType === 'W' ? 'Warning' : row.messageType === 'E' ? 'Error' : 'Information'\n        };\n        errorsArray.push(error);\n      }\n\n      if (errorsArray.length &gt; 0) {\n        // Sort by row number in Excel file\n        errorsArray.sort((a, b) =&gt; a.row - b.row);\n        // Add errors to the component\n        source.addArrayToMessages(errorsArray);\n      }\n    } catch (error) {\n      uploadDialog.setBusy(false);\n      // Add generic error message\n      source.addArrayToMessages([\n        {\n          title: 'Error checking shipping details',\n          row: 0,\n          group: true,\n          rawValue: 'Error in backend validation',\n          ui5type: 'Error'\n        }\n      ]);\n    }\n\n    uploadDialog.setBusy(false);\n    // Important! This must not be deleted\n    // This tells the component that the code can continue\n    resolve();\n  });\n}, this);\n</code></pre> <p>Both approaches (CAP and RAP) provide powerful ways to validate spreadsheet data on the server side before it's committed to the database, allowing for more complex business rules and validation than what would be possible in the frontend alone.</p>"},{"location":"pages/GettingStarted/","title":"Getting Started","text":"<p>Commercial License Required</p> <p>This component is licensed under the SpreadsheetImporter Commercial License since version 2.0.0. For details, see LICENSE.md. The version 1.x is licensed under the Apache License 2.0 and remains free of charge but no major updates will be provided.</p>"},{"location":"pages/GettingStarted/#deployment-strategy","title":"Deployment Strategy","text":"<p>We recommend different deployment approaches depending on your platform:</p> <ul> <li>For ABAP systems: Only centralized deployment is possible. Decentralized deployment is not supported for ABAP systems.</li> <li>For SAP Business Technology Platform (BTP): Decentralized deployment is recommended, though centralized deployment is also possible.</li> </ul> <p>For decentralized deployment in ABAP, refer to ABAP Component Deployment. For BTP deployment, special considerations are necessary, which are detailed in BTP Deployment. A full BTP deployment example is available in this sample project.</p>"},{"location":"pages/GettingStarted/#decentralized-deployment","title":"Decentralized Deployment","text":"<p>Decentralized Deployment for ABAP</p> <p>This method is not possible for ABAP systems. For ABAP, please use Central Deployment instead.</p> <p>Decentralized Deployment for BTP</p> <p>For BTP applications, decentralized deployment is the recommended approach.</p> <p>In decentralized deployment, the component is included directly in each app and deployed with it. For ABAP-specific instructions, refer to ABAP Component Deployment. For BTP-specific considerations, refer to BTP Deployment.</p>"},{"location":"pages/GettingStarted/#central-deployment","title":"Central Deployment","text":"<p>In centralized deployment, the Spreadsheet Upload component is stored centrally, either in an on-premise ABAP system or in BTP. For detailed instructions, see the Central Deployment page.</p>"},{"location":"pages/GettingStarted/#key-features","title":"Key Features \u2728","text":"<p>The Spreadsheet Importer offers several powerful features:</p> <ul> <li>Multiple Upload Methods: Upload files, drag &amp; drop, or paste data directly</li> <li>Paste Functionality (v2.3.0+): Copy data from Excel/Google Sheets and paste directly (Ctrl+V)</li> <li>File Paste Support (v2.3.0+): Paste .xlsx files directly from your clipboard</li> <li>Wizard Mode: Step-by-step guided import process</li> <li>Universal Backend Support: Works with any OData service</li> <li>Validation &amp; Error Handling: Comprehensive data validation</li> </ul>"},{"location":"pages/GettingStarted/#setup","title":"Setup","text":"<p>To integrate the <code>ui5-cc-spreadsheetimporter</code> component manually, follow the steps below.</p>"},{"location":"pages/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>Node.js v16.18.0, v18.12.0, or higher</li> <li>npm v8.0.0 or higher</li> <li>UI5 CLI v3.0.0 or higher</li> </ul>"},{"location":"pages/GettingStarted/#setup-for-decentralized-deployment","title":"Setup for Decentralized Deployment","text":"<p>There are two ways to include the component in your application:</p>"},{"location":"pages/GettingStarted/#option-a-install-from-npm","title":"Option A: Install from npm","text":"<p>1. Install the component from npm:</p> <pre><code>npm install ui5-cc-spreadsheetimporter\n</code></pre> <p>2. Add <code>resourceRoots</code> to the <code>sap.ui5</code> section of your <code>manifest.json</code>:</p> <p>Version Management</p> <p>Whenever you update the <code>ui5-cc-spreadsheetimporter</code> module, ensure that the version specified in your <code>manifest.json</code> is up to date. For more information, see Version Namespace.</p> <pre><code>\"resourceRoots\": {\n  \"cc.spreadsheetimporter.v2_3_0\": \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\"\n}\n</code></pre> <p>3. Update your build script in <code>package.json</code> by adding <code>--all</code>:</p> <pre><code>\"scripts\": {\n  \"build\": \"ui5 build --config=ui5.yaml --all --clean-dest --dest dist\"\n}\n</code></pre>"},{"location":"pages/GettingStarted/#option-b-using-jsdelivr-cdn","title":"Option B: Using jsDelivr CDN","text":"<p>For BTP applications (or apps using the index.html bootstrap), you can use jsDelivr CDN to include the component directly without npm installation:</p> <p>1. Add the CDN resource path to your <code>index.html</code> bootstrap:</p> <pre><code>&lt;script\n  id=\"sap-ui-bootstrap\"\n  src=\"https://sapui5.hana.ondemand.com/resources/sap-ui-core.js\"\n  data-sap-ui-theme=\"sap_horizon\"\n  data-sap-ui-resourceroots='{\n    \"your.app.namespace\": \"./\",\n    \"cc.spreadsheetimporter.v2_3_0\": \"https://cdn.jsdelivr.net/npm/ui5-cc-spreadsheetimporter@1.7.3/dist\"\n  }'\n  data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n  data-sap-ui-async=\"true\"\n  data-sap-ui-frameOptions=\"trusted\"\n&gt;&lt;/script&gt;\n</code></pre> <p>Version Specification</p> <p>Always specify the exact version in the CDN URL (e.g., <code>@1.7.3</code>) to ensure consistent behavior of your application.</p> <p>For more information on using jsDelivr CDN, see the jsDelivr documentation.</p>"},{"location":"pages/GettingStarted/#using-the-component-in-your-app","title":"Using the Component in your App","text":"<p>1. Add <code>componentUsages</code> to the <code>sap.ui5</code> section of your <code>manifest.json</code> (same for both options):</p> <p>Version Management</p> <p>Whenever you update the <code>ui5-cc-spreadsheetimporter</code> module, ensure that the version specified in your <code>manifest.json</code> is up to date. For more information, see Version Namespace.</p> <pre><code>\"componentUsages\": {\n  \"spreadsheetImporter\": {\n    \"name\": \"cc.spreadsheetimporter.v2_3_0\"\n  }\n}\n</code></pre> <p>2. Optional: Handle the \"component does not exist\" error</p> <p>If you encounter the error <code>component does not exist</code> when deploying to an SAP system (S/4 On-Premise or SAP BTP ABAP environment), add the following to your <code>manifest.json</code>:</p> <p>Resource Roots Path</p> <p>Ensure the <code>resourceRoots</code> path is correct, especially considering the lowercase format change since version 0.34.0.</p> <pre><code>\"sap.app\": {\n  \"embeds\": [\"thirdparty/customcontrol/spreadsheetimporter/v2_3_0\"]\n}\n</code></pre>"},{"location":"pages/GettingStarted/#setup-for-central-deployment","title":"Setup for Central Deployment","text":"<p>1. Deploy the component using your desired version. Refer to Central Deployment for detailed instructions.</p> <p>2. Add <code>componentUsages</code> to the <code>sap.ui5</code> section of your <code>manifest.json</code>:</p> <p>Version Management</p> <p>Whenever you update the <code>ui5-cc-spreadsheetimporter</code> module, ensure that the version specified in your <code>manifest.json</code> is up to date. For more information, see Version Namespace. Also, ensure the version is available in the system.</p> <pre><code>\"componentUsages\": {\n  \"spreadsheetImporter\": {\n    \"name\": \"cc.spreadsheetimporter.v2_3_0\"\n  }\n}\n</code></pre>"},{"location":"pages/GettingStarted/#starting-with-the-fiori-elements-application","title":"Starting with the Fiori Elements Application","text":"<p>OData Version Differences</p> <p>There are different implementations for Fiori Elements depending on the OData version.</p> <p>If something may not work as expected, set the <code>debug</code> property to <code>true</code> in the component configuration. This will log additional information to the console that can help diagnose the issue. Search for <code>Spreadsheet Importer</code> in the console output to find the log entries.</p> <p>To start the Spreadsheet Upload Dialog, add a button to your Fiori Elements app. The Guided Development extension is a recommended way to add a custom action:</p> <p></p> <p>After adding the custom action, implement your custom code using either OData V2 or OData V4. You can also use a controller extension in Fiori Elements. For an example, see the Fiori Elements V4 Example App.</p>"},{"location":"pages/GettingStarted/#starting-with-fiori-elements-odata-v4","title":"Starting with Fiori Elements (OData V4)","text":""},{"location":"pages/GettingStarted/#manifestjson-extension","title":"Manifest.json Extension","text":"<p>Here is an example of a custom action from the sample app for the object page. This example adds a button to the order items table on the object page. If there are multiple tables, always specify the relevant <code>tableId</code>. By using <code>\"enabled\": \"{ui&gt;/isEditable}\"</code>, you can automatically disable the button when the page is not in edit mode.</p> <pre><code>\"OrdersObjectPage\": {\n  \"type\": \"Component\",\n  \"id\": \"OrdersObjectPage\",\n  \"name\": \"sap.fe.templates.ObjectPage\",\n  \"options\": {\n    \"settings\": {\n      \"editableHeaderContent\": false,\n      \"entitySet\": \"Orders\",\n      \"navigation\": {\n        \"Items\": {\n          \"detail\": {\n            \"route\": \"Orders_ItemsObjectPage\"\n          }\n        }\n      },\n      \"controlConfiguration\": {\n        \"Items/@com.sap.vocabularies.UI.v1.LineItem\": {\n          \"actions\": {\n            \"ObjectPageExtController\": {\n              \"press\": \"ui.v4.ordersv4fe.ext.ObjectPageExtController.openSpreadsheetUploadDialogTable\",\n              \"visible\": true,\n              \"requiresSelection\": false,\n              \"enabled\": \"{ui&gt;/isEditable}\",\n              \"text\": \"Spreadsheet Upload\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pages/GettingStarted/#custom-code","title":"Custom Code","text":"<p>Using tableId Configuration</p> <p>It's highly recommended to explicitly specify the <code>tableId</code> in your configuration. The component searches for tables in the view, and sometimes additional tables may appear (e.g., through value helps), which can lead to errors when more than one table is available. Using <code>tableId</code> ensures the component always targets the correct table. Use the UI5 Inspector to find the correct table ID (<code>sap.m.Table</code> and <code>sap.ui.table.Table</code> is supported).</p> <p>The following code sets the busy indicator, creates the component if it hasn't been created already, and opens the dialog. The <code>context</code> attribute is mandatory to allow the component to access the app's context, including binding paths and the model. You can pass options like <code>context</code> and <code>tableId</code> at runtime using the <code>openSpreadsheetUploadDialog</code> method. This is useful when opening the dialog for specific tables (see TableSelector).</p> <pre><code>openSpreadsheetUploadDialog: async function (event) {\n  this.editFlow.getView().setBusyIndicatorDelay(0);\n  this.editFlow.getView().setBusy(true);\n  this.spreadsheetUpload = await this.editFlow.getView()\n    .getController()\n    .getAppComponent()\n    .createComponent({\n      usage: \"spreadsheetImporter\",\n      async: true,\n      componentData: {\n        context: this,\n        tableId: \"ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Items::LineItem-innerTable\"\n      },\n    });\n  this.spreadsheetUpload.openSpreadsheetUploadDialog();\n  this.editFlow.getView().setBusy(false);\n}\n</code></pre>"},{"location":"pages/GettingStarted/#example","title":"Example","text":"<p>See the live demo at https://livedemo.spreadsheet-importer.com/.</p> <p></p>"},{"location":"pages/GettingStarted/#starting-with-fiori-elements-odata-v2","title":"Starting with Fiori Elements (OData V2)","text":""},{"location":"pages/GettingStarted/#manifestjson-extension_1","title":"Manifest.json Extension","text":"<p>Here is an example of a custom action from the sample app for the object page.</p> <pre><code>\"extends\": {\n  \"extensions\": {\n    \"sap.ui.controllerExtensions\": {\n      \"sap.suite.ui.generic.template.ObjectPage.view.Details\": {\n        \"controllerName\": \"ui.v2.ordersv2.ext.controller.ObjectPageExt\",\n        \"sap.ui.generic.app\": {\n          \"Orders\": {\n            \"EntitySet\": \"Orders\",\n            \"Sections\": {\n              \"Items::com.sap.vocabularies.UI.v1.LineItem\": {\n                \"id\": \"Items::com.sap.vocabularies.UI.v1.LineItem\",\n                \"Actions\": {\n                  \"spreadsheetImporter\": {\n                    \"id\": \"spreadsheetUploadButton\",\n                    \"text\": \"Spreadsheet Upload\",\n                    \"applicablePath\": \"ui&gt;/editable\",\n                    \"press\": \"openSpreadsheetUploadDialog\",\n                    \"requiresSelection\": false\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pages/GettingStarted/#custom-code_1","title":"Custom Code","text":"<pre><code>openSpreadsheetUploadDialog: async function (event) {\n  this.getView().setBusyIndicatorDelay(0);\n  this.getView().setBusy(true);\n  this.spreadsheetUpload = await this.getView()\n    .getController()\n    .getOwnerComponent()\n    .createComponent({\n      usage: \"spreadsheetImporter\",\n      async: true,\n      componentData: {\n        context: this,\n        tableId: \"ui.v2.ordersv2::DetailsPage::Items::Table\"\n      },\n    });\n  this.spreadsheetUpload.openSpreadsheetUploadDialog();\n  this.getView().setBusy(false);\n}\n</code></pre>"},{"location":"pages/GettingStarted/#deployment-of-your-app","title":"Deployment of Your App","text":""},{"location":"pages/GettingStarted/#abap-stack","title":"ABAP Stack","text":""},{"location":"pages/GettingStarted/#component-deployment","title":"Component Deployment","text":"<p>These instructions apply generally to UI5 Reuse Components, not just the Spreadsheet Importer (see UI5 Reuse Components).</p> <p>When deploying the component decentrally to an ABAP system, its namespace is registered in the app index, just as it is with central deployment. After deploying decentrally for the first time, you can use the component centrally (see Setup Central Deployment). However, you can only deploy the component decentrally once because the namespace can only exist once in the app index.</p> <p>This is why we recommend starting with central deployment.</p>"},{"location":"pages/GettingStarted/#using-the-component-outside-the-app-index","title":"Using the Component Outside the App Index","text":"<p>If the component is used outside the Fiori Launchpad, or if it cannot be found even after deployment, you can direct the app to the correct path using <code>url</code> and <code>name</code> in the <code>createComponent</code> method:</p> <pre><code>openSpreadsheetUploadDialog: async function (oEvent) {\n  this.getView().setBusyIndicatorDelay(0);\n  this.getView().setBusy(true);\n  this.spreadsheetUpload = await this.getView()\n    .getController()\n    .getAppComponent()\n    .createComponent({\n      usage: \"spreadsheetImporter\",\n      async: true,\n      componentData: {\n        context: this,\n      },\n      url: \"/sap/bc/ui5_ui5/sap/Z_XUP_v0_33_2\",\n      name: \"cc.spreadsheetimporter.v2_3_0\"\n    });\n  this.spreadsheetUpload.openSpreadsheetUploadDialog();\n  this.getView().setBusy(false);\n}\n</code></pre> <p>This method can be used as an alternative to <code>resourceRoots</code> in the <code>manifest.json</code> when you do not have access to the <code>manifest.json</code> (e.g., in adaptation projects).</p>"},{"location":"pages/GettingStarted/#error-librarycomponent-used-in-application-does-not-exist","title":"Error: Library/Component Used in Application Does Not Exist","text":"<p>When deploying the app to your ABAP system, you might encounter an error like <code>SAPUI5 library/component cc.spreadsheetimporter.v2_3_0 used in application Z*** does not exist</code>. The application is deployed, but the service returns an error.</p> <p>To avoid this error, add the following to your <code>manifest.json</code> file:</p> <p>Resource Roots Path</p> <p>Ensure the <code>resourceRoots</code> path is correct, especially considering the lowercase format change since version 0.34.0.</p> <pre><code>\"sap.app\": {\n  \"embeds\": [\"thirdparty/customcontrol/spreadsheetimporter/v2_3_0\"]\n}\n</code></pre> <p>This addition should resolve the issue, making <code>resourceRoots</code> unnecessary.</p>"},{"location":"pages/GettingStarted/#file-unknown-when-deploying-the-app","title":"File Unknown When Deploying the App","text":"<p>If the ABAP system does not recognize <code>.ts</code> files, create a <code>.Ui5RepositoryTextFiles</code> file in your app's <code>webapp</code> folder, as described here. An example file is available here and might look like this:</p> <pre><code>^.*.ts$\n^.*.ts.map$\n^.*.js.map$\n</code></pre> <p>If you use the <code>deploy-to-abap</code> command, you can exclude these files from the deployment by adding the <code>exclude</code> option to your <code>ui5.yaml</code> file:</p> <pre><code>customTasks:\n  - name: deploy-to-abap\n    afterTask: replaceVersion\n    configuration:\n      target:\n        url: https://XYZ.sap-system.corp:44311\n        client: 200\n        auth: basic\n      credentials:\n        username: env:XYZ_USER\n        password: env:XYZ_PASSWORD\n      app:\n        name: /TEST/SAMPLE_APP\n        package: /TEST/UPLOAD\n        transport: XYZQ300582\n      exclude:\n        - .*\\.ts\n        - .*\\.ts.map\n        - .*\\.js.map\n</code></pre>"},{"location":"pages/GettingStarted/#btp-environment","title":"BTP Environment","text":""},{"location":"pages/GettingStarted/#running-with-cap","title":"Running with CAP","text":"<p>If you are using CAP and installing the component as a dependency to your UI5 app, you need to use <code>cds-plugin-ui5</code> to ensure the UI5 Tooling loads the installed component.</p> <pre><code>npm install cds-plugin-ui5 --save-dev\n</code></pre>"},{"location":"pages/GettingStarted/#handling-large-file-uploads-in-cap","title":"Handling Large File Uploads in CAP","text":"<p>When uploading large spreadsheet files (e.g., files with thousands of entries), you might encounter the error <code>request entity too large</code>. This happens because CAP has a default request size limit.</p> <p>To resolve this issue, you have two options:</p> <ol> <li>Increase the request size limit in your CAP application:</li> </ol> <p>Add the following configuration to your <code>package.json</code> file:</p> <pre><code>\"cds\": {\n  \"server\": {\n    \"body_parser\": {\n      \"limit\": \"10mb\"\n    }\n  }\n}\n</code></pre> <p>You can adjust the <code>10mb</code> value based on your needs.</p> <ol> <li>Reduce the batch size in the Spreadsheet Importer component:</li> </ol> <p>Set a smaller <code>batchSize</code> parameter when creating the component:</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      tableId: 'your-table-id',\n      batchSize: 100 // Reduce batch size to handle large files\n    }\n  });\n</code></pre> <p>The default batch size is 1000. Reducing it will create smaller requests that stay within CAP's limits.</p>"},{"location":"pages/GettingStarted/#configuring-ui5-task-zipper-in-your-deployment-yaml-file","title":"Configuring <code>ui5-task-zipper</code> in Your Deployment YAML File","text":"<p>A full example can be found in this sample project.</p> <p>If you use the <code>ui5-task-zipper</code> task, ensure that <code>ui5-cc-spreadsheetimporter</code> is included in the zip file.</p> <pre><code>builder:\n  customTasks:\n    - name: ui5-task-zipper\n      afterTask: generateComponentPreload\n      configuration:\n        archiveName: uimodule\n        includeDependencies:\n          - ui5-cc-spreadsheetimporter-v2-3-0\n</code></pre> <p>The metadata name is defined in the <code>ui5.yaml</code> file of the component.</p> <p>Metadata Name</p> <p>Before version 0.34.0, the metadata name was <code>ui5-cc-spreadsheetimporter</code> without the version.</p>"},{"location":"pages/GettingStarted/#updating-sapcloudservice-in-spreadsheet-importer-manifestjson","title":"Updating <code>\"sap.cloud\".service</code> in Spreadsheet Importer <code>manifest.json</code>","text":"<p>When using decentralized deployment, deployment may fail with the following error:</p> <p><code>\"Service name 'spreadsheetimporter_v2_3_0' and public setting 'true' in embedded manifest.json have to be equal to service name 'xxxxxxx' and public setting 'true' of root manifest.json\"</code></p> <p>SAP currently does not provide a fix for this.</p>"},{"location":"pages/GettingStarted/#workaround-1","title":"Workaround 1","text":"<p>Manually update the <code>service</code> name in the <code>manifest.json</code> of the Spreadsheet Importer to match the service name in your app's <code>manifest.json</code>.</p> <p>To automate this, you can use the custom UI5 Tooling task <code>ui5-task-btp-manifest</code>.</p>"},{"location":"pages/GettingStarted/#install-the-task","title":"Install the Task","text":"<pre><code>npm install --save-dev ui5-task-btp-manifest\n</code></pre>"},{"location":"pages/GettingStarted/#add-the-task-to-your-ui5yaml","title":"Add the Task to Your <code>ui5.yaml</code>","text":"<pre><code>builder:\n  customTasks:\n    - name: ui5-task-btp-manifest\n      afterTask: replaceVersion\n</code></pre> <p>This task will update the Spreadsheet Importer manifest with the app's service name at this path: <code>dist/thirdparty/customcontrol/spreadsheetimporter/v2_3_0/manifest.json</code>.</p>"},{"location":"pages/GettingStarted/#workaround-2","title":"Workaround 2","text":"<p>According to a comment from user TravelTechCode, you can try the following deployment sequence:</p> <ol> <li>Deploy your app without the UI5 Spreadsheet component first.</li> <li>Add the UI5 Spreadsheet component and deploy the app again.</li> </ol> <p>This approach avoids deployment errors and allows the component to be accessed in the content explorer.</p>"},{"location":"pages/HowItWorks/","title":"How it Works","text":"<p>The major advantage of this UI5 component is its universal usability with minimal configuration, and it is independent of the backend implementation. This is achieved by reading the files that are already present in the frontend and utilizing the standard UI5 APIs.</p>"},{"location":"pages/HowItWorks/#technical-background","title":"Technical Background","text":"<p>The UI5 SpreadsheetUpload is built on a reuse component, which requires the definition of componentUsages in the manifest and the usage of createComponent in the code. This allows for the use of i18n and a component-preload, which enhances the loading time performance. When the component is centrally deployed on an ABAP server, the setup is straightforward.</p>"},{"location":"pages/HowItWorks/#integration-into-ui5","title":"Integration into UI5","text":"<p>Integrating the component is straightforward as long as the component has access to the context or the view, as without this access, it won't function. Upon creation of the component, it searches for a table in the view to utilize the binding for the upload. Other necessary details, such as metadata and draft activation actions, are also derived from the table. If no table or more than two tables are found, the table must be defined in the options.</p>"},{"location":"pages/HowItWorks/#creating-the-template-file","title":"Creating the Template File","text":"<p>By utilizing the metadata, the component can identify the entity of the binding and generate a template file with labels.</p>"},{"location":"pages/HowItWorks/#extracting-the-spreadsheet-files","title":"Extracting the Spreadsheet Files","text":"<p>To avoid sending the entire Spreadsheet file as binary data to the backend, the component utilizes the open-source library SheetJS to read data from the file. Additionally, Spreadsheet formats are converted to OData formats. With the raw data at hand, the component can utilize the ODataListBinding and <code>create</code> to send the data to the backend. Since the standard interfaces are used, the key advantage is the independence from the backend scenario, such as CAP or RAP.</p> <p>The data is sent as a batch, and to prevent a batch from becoming too large, the data is sent in batches of 1,000 by default. The size of the batches can be adjusted in the options.</p>"},{"location":"pages/SupportVersions/","title":"Supported Versions","text":"<p>The goal is to test as many versions and environments as possible, especially all versions in long-term maintenance. Even though the tests are currently only in CAP, every OData Service, including the <code>metadata.xml</code>, is supported. That includes OData Services created with CAP, RAP, and SEGW. That means as long as you are using UI5 version <code>1.71</code>, you can also use this in ECC or S/4HANA.</p> <p>Here is an overview of the apps that were created and passed the smoke test:</p> <p>Another overview will show you which apps are already tested automatically with wdi5 and are therefore tested on a constant basis.</p> <p>All the example apps can be found in the <code>examples</code> folder. The test scripts can be found in the <code>test</code> folder. More info at wdi5 tests</p> <p>Support</p> <p>To summarize: All stable UI5 versions are currently supported (from 1.71). Also, 2.0 is already supported but is still experimental, as version 2.0 may still change. Also every OData Service, including SEGW, RAP, and CAP, is supported.</p>"},{"location":"pages/SupportVersions/#apps-used-for-the-tests","title":"Apps used for the tests","text":"<p>Here is an overview of the apps that were created and used for the tests.</p>"},{"location":"pages/SupportVersions/#cap-v2","title":"CAP V2","text":"List Report Draft List Report Non Draft Object Page Draft Object Page Non Draft Freestyle"},{"location":"pages/SupportVersions/#cap-v4","title":"CAP V4","text":"List Report Draft Object Page Draft Freestyle Flexible Programming Model Typescript CDS Plugin"},{"location":"pages/SupportVersions/#wdi5-tests","title":"wdi5 Tests","text":""},{"location":"pages/SupportVersions/#cap-v2_1","title":"CAP V2","text":"UI5 Version List Report Draft List Report Non Draft Object Page Draft Object Page Non Draft Freestyle OpenUI5 Freestyle 2.0 1.136 1.120 1.108 1.96 1.84 1.71 <p>Warning</p> <p>OpenUI5: Draft Activation for V2 in OpenUI5 is not supported.</p>"},{"location":"pages/SupportVersions/#cap-v4_1","title":"CAP V4","text":"UI5 Version List Report Draft Object Page Draft Freestyle Flexible Programming Model Typescript CDS Plugin 2.0 1.136 1.120 1.108 1.96 1.84"},{"location":"pages/TableSelector/","title":"Table Selector Implementation Documentation","text":"<p>Warning</p> <p>This feature is available since version 0.23.0</p> <p>The <code>TableSelector</code> is designed to help users select a table from a list of available tables in a SAP UI5 application. The tables are aggregated and presented in a dialog, from which a user can select a table.</p>"},{"location":"pages/TableSelector/#usage","title":"Usage","text":"<p><code>TableSelector</code> is triggered when the option <code>useTableSelector</code> is set to <code>true</code> in the component options and multiple tables are in the view. It will open when you execute <code>openSpreadsheetUploadDialog</code>.</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      useTableSelector: true\n    }\n  });\nthis.spreadsheetUpload.openSpreadsheetUploadDialog();\n</code></pre>"},{"location":"pages/TableSelector/#custom-options-for-each-table","title":"Custom Options for each Table","text":"<p>If you want to set custom options for each table, you have to trigger the Table Selector before opening the dialog to get the table id with <code>triggerInitContext()</code>.</p> <pre><code>this.spreadsheetUpload = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      useTableSelector: true\n    }\n  });\n// necessary to trigger Table Selector and get tableId\nawait this.spreadsheetUpload.triggerInitContext();\nconst selectedTable = this.spreadsheetUpload.getTableId();\n</code></pre> <p>The method <code>getTableId</code> returns the table id of the selected table. With the id, you can set custom options for each table.</p>"},{"location":"pages/TableSelector/#full-example","title":"Full Example","text":"<p>Make sure you check if the user selected a table with <code>if (selectedTable)</code>.</p> <pre><code>openSpreadsheetUploadDialog: async function (event) {\n  let spreadsheetImporterOptions;\n  this.editFlow.getView().setBusyIndicatorDelay(0);\n  this.editFlow.getView().setBusy(true);\n  // prettier-ignore\n  this.spreadsheetUpload = await this.editFlow.getView()\n      .getController()\n      .getAppComponent()\n      .createComponent({\n        usage: \"spreadsheetImporter\",\n        async: true,\n        componentData: {\n          context: this,\n          useTableSelector: true\n        }\n      });\n  // necessary to trigger Table Selector and get tableId\n  await this.spreadsheetUpload.triggerInitContext();\n  const selectedTable = this.spreadsheetUpload.getTableId();\n  if (selectedTable) {\n    // not necessary to have specific options for each table, but possible to set options for specific tables\n    // check if selectedTable is available, if not, the user clicked on cancel\n    if (selectedTable === \"ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Items::LineItem-innerTable\") {\n      spreadsheetImporterOptions = {\n        context: this,\n        tableId: \"ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Items::LineItem-innerTable\",\n        columns: [\"product_ID\", \"quantity\", \"title\", \"price\", \"validFrom\", \"timestamp\", \"date\", \"time\", \"boolean\", \"decimal\"],\n        mandatoryFields: [\"product_ID\", \"quantity\"],\n        spreadsheetFileName: \"Test.xlsx\",\n        hidePreview: true,\n        sampleData: [{\n          product_ID: \"HT-1000\",\n          quantity: 1,\n          title: \"Notebook Basic 15\",\n          price: 956,\n          validFrom: new Date(),\n          timestamp: new Date(),\n          date: new Date(),\n          time: new Date(),\n          boolean: true,\n          decimal: 1.1\n        }]\n      };\n    }\n    if (selectedTable === \"ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Shipping::LineItem-innerTable\") {\n      spreadsheetImporterOptions = {\n        context: this,\n        tableId: \"ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Shipping::LineItem-innerTable\"\n      };\n    }\n\n    // possible to open dialog with options, option not necessary\n    this.spreadsheetUpload.openSpreadsheetUploadDialog(spreadsheetImporterOptions);\n  }\n  this.editFlow.getView().setBusy(false);\n},\n</code></pre>"},{"location":"pages/Troubleshooting/","title":"Troubleshooting","text":""},{"location":"pages/Troubleshooting/#issues","title":"Issues","text":"<p>If you encounter any issues that are not covered in this documentation, have suggestions, or ideas for improvements, please create an issue in the GitHub repository: https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter/issues</p>"},{"location":"pages/Troubleshooting/#activate-debug-mode-and-copy-error-messages","title":"Activate Debug Mode and Copy Error Messages","text":""},{"location":"pages/Troubleshooting/#activate-debug-mode","title":"Activate Debug Mode","text":"<p>To activate the debug mode, you need to add the following parameter to the URL: <code>?sap-ui-debug=true</code></p> <p>Alternatively, you can set the <code>debug</code> parameter to <code>true</code> during the initialization of the Spreadsheet Upload component. However, this can only be done if the component can be opened, so it's preferable to use the URL parameter if possible.</p> <pre><code>this.spreadsheetUpload = await this.getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      debug: true\n    }\n  });\n</code></pre>"},{"location":"pages/Troubleshooting/#copy-console-messages","title":"Copy Console Messages","text":"<p>After activating the debug mode, you can copy the console messages from the browser console. Make sure to do this after reproducing the error.</p> <ol> <li>Open the browser console</li> <li>Right-click on a message and select \"Save as\"</li> </ol> <p>Save the messages to a file and use it to report an issue. Alternatively, you can try selecting all the messages and copying them to a text file.</p>"},{"location":"pages/Troubleshooting/#error-script-load-error","title":"Error: <code>script load error</code>","text":"<p>If you receive an error similar to the following:</p> <pre><code>ui5loader-dbg.js:1042 Uncaught (in promise) ModuleError: failed to load 'cc/spreadsheetimporter/v2_3_0/Component.js' from resources/cc/spreadsheetimporter/v2_3_0/Component.js: script load error\n</code></pre> <p>Since the component is designed to always use a specific version, you must ensure that the correct version is used after an update. In this example, it appears that the installed version does not match the version defined in the manifest file. The application is trying to load version \"0.16.3\", but the installed version is \"0.16.4\". See the configurations for this version below:</p>"},{"location":"pages/Troubleshooting/#packagejson","title":"package.json","text":"<pre><code>  \"dependencies\": {\n    \"ui5-cc-spreadsheetimporter\": \"0.16.4\"\n  }\n</code></pre>"},{"location":"pages/Troubleshooting/#manifestjson","title":"manifest.json","text":"<p>Resource Roots Path</p> <p>The <code>resourceRoots</code> path \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\" changed from version 0.34.0 to lowercase. Please make sure to use the correct path.</p> <pre><code>\"componentUsages\": {\n    \"spreadsheetImporter\": {\n        \"name\": \"cc.spreadsheetimporter.v2_3_0\"\n    }\n},\n\"resourceRoots\": {\n    \"cc.spreadsheetimporter.v2_3_0\": \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\"\n}\n</code></pre>"},{"location":"pages/Typescript/","title":"Typescript","text":"<p>Since the component is written in TypeScript, we can also provide the generated types.</p> <p>The GitHub repository contains a sample TypeScript application created with the Fiori Generator. You can find the example app in the example folder.</p>"},{"location":"pages/Typescript/#setup","title":"Setup","text":"<p>Generate an app with the Fiori Tools Generator in TypeScript or use the Easy UI5 TS Generator.</p>"},{"location":"pages/Typescript/#ts-configjson","title":"ts-config.json","text":"<p>You can consume the types from the <code>@sapui5/ts-types-esm</code> and the <code>ui5-cc-spreadsheetimporter</code> package.</p> <pre><code>    \"types\": [\"@sapui5/ts-types-esm\", \"ui5-cc-spreadsheetimporter\"],\n    \"typeRoots\": [\"./node_modules\"]\n</code></pre>"},{"location":"pages/Typescript/#manifestjson","title":"manifest.json","text":"<p>Add the component usage and the resource roots to the manifest.json as described in the Getting Started section.</p> <p>Resource Roots Path</p> <p>The <code>resourceRoots</code> path \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\" changed from version 0.34.0 to lowercase. Please make sure to use the correct path.</p> <pre><code>        \"componentUsages\": {\n            \"spreadsheetImporter\": {\n                \"name\": \"cc.spreadsheetimporter.v2_3_0\"\n            }\n        },\n        \"resourceRoots\": {\n            \"cc.spreadsheetimporter.v2_3_0\": \"./thirdparty/customcontrol/spreadsheetimporter/v2_3_0\"\n        },\n</code></pre>"},{"location":"pages/Typescript/#custom-action","title":"Custom Action","text":"<p>This is an example of how you could create the component and attach an event handler to the <code>checkBeforeRead</code> event with the types <code>Component</code> and <code>Component$CheckBeforeReadEventParameters</code> for the event parameters with an OData V4 Fiori Elements Application and UI5 Version 1.116.</p> <pre><code>import Component, {\n  Component$ChangeBeforeCreateEvent,\n  Component$CheckBeforeReadEvent,\n  Component$UploadButtonPressEvent\n} from 'cc/spreadsheetimporter/v2_3_0/Component';\nimport BaseController from 'sap/fe/core/BaseController';\nimport ExtensionAPI from 'sap/fe/core/ExtensionAPI';\n\nexport async function openSpreadsheetUploadDialog(this: ExtensionAPI) {\n  const view = this.getRouting().getView();\n  const controller = view.getController() as BaseController;\n  view.setBusyIndicatorDelay(0);\n  view.setBusy(true);\n  const spreadsheetUpload = (await controller.getAppComponent().createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      activateDraft: true\n    }\n  })) as Component;\n  // event to check before uploaded to app\n  spreadsheetUpload.attachCheckBeforeRead(function (event: Component$CheckBeforeReadEvent) {\n    // example\n    const sheetData = event.getParameter('sheetData') as any;\n    event.getParameters().messages;\n    let errorArray = [];\n    for (const [index, row] of sheetData.entries()) {\n      //check for invalid price\n      for (const key in row) {\n        if (key.endsWith('[price]') &amp;&amp; row[key].rawValue &gt; 100) {\n          const error = {\n            title: 'Price too high (max 100)',\n            row: index + 2,\n            group: true,\n            rawValue: row[key].rawValue,\n            ui5type: 'Error'\n          };\n          errorArray.push(error);\n        }\n      }\n    }\n    (event.getSource() as Component).addArrayToMessages(errorArray);\n  }, this);\n\n  // event example to prevent uploading data to backend\n  spreadsheetUpload.attachUploadButtonPress(function (event: Component$UploadButtonPressEvent) {\n    //event.preventDefault();\n    //event.getParameter(\"payload\");\n  }, this);\n\n  // event to change data before send to backend\n  spreadsheetUpload.attachChangeBeforeCreate(function (event: Component$ChangeBeforeCreateEvent) {\n    let payload = event.getParameter('payload');\n    // round number from 12,56 to 12,6\n    if (payload.price) {\n      payload.price = Number(payload.price).toFixed(1);\n    }\n    return payload;\n  }, this);\n  spreadsheetUpload.openSpreadsheetUploadDialog();\n  view.setBusy(false);\n}\n</code></pre>"},{"location":"pages/Update/","title":"Using UPDATE","text":"<p>Warning</p> <p>This feature is available since version 1.7.0 and currently experimental and may not work as expected.  Also only available for OData V4.  Please provide feedback: https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter/issues</p>"},{"location":"pages/Update/#usage","title":"Usage","text":"<p>It is recommended, especially for Entities with GUID, to first download the data with the Spreadsheet Importer and include the keys.</p> <ol> <li>Download the data with the Spreadsheet Importer and include the keys.</li> <li>Edit the spreadsheet</li> <li>Upload the data with the Spreadsheet Importer.</li> </ol>"},{"location":"pages/Update/#getting-started","title":"Getting started","text":"<p>The minimal configuration to update entities instead of creating is:</p> <pre><code>this.spreadsheetUploadUpdate = await this.editFlow\n  .getView()\n  .getController()\n  .getAppComponent()\n  .createComponent({\n    usage: 'spreadsheetImporter',\n    async: true,\n    componentData: {\n      context: this,\n      tableId: 'ui.v4.ordersv4fe::OrdersObjectPage--fe::table::Items::LineItem-innerTable',\n      action: 'UPDATE',\n      deepDownloadConfig: {\n        addKeysToExport: true,\n        showOptions: false,\n        filename: 'Items'\n      },\n      showDownloadButton: true\n    }\n  });\nthis.spreadsheetUploadUpdate.openSpreadsheetUploadDialog();\n</code></pre> <p>This configuration will show the download button and download all the available data for the referenced table. When you press the download button, the data will be downloaded including the keys necessary for the update.</p> <p>You can then change the data in the spreadsheet and upload the data again. By default, only the changed properties are updated (partial update). You can change this by setting the <code>fullUpdate</code> property to <code>true</code> (see Configuration below).</p>"},{"location":"pages/Update/#how-it-works","title":"How it works","text":"<p>When you upload the file to the App, it will do the usual checks if the columns are in the data model and the data is valid (see Checks). When the user presses the upload button, it will fetch all the data in the batch. To make sure all the data is fetched, it will fetch the data for active and draft separately. So for every batch a ListBinding is created and two requests are made with filters for the keys and for <code>IsActiveEntity = true</code> and <code>IsActiveEntity = false</code>. This is needed because of the separation of active and draft (see why requests fail in CAP with OData draft enabled).</p> <p>This data is used to determine if the object is in draft or active mode, if the object exists at all, and for partial updates whether a field is changed.</p> <p>For every change, an <code>ODataContextBinding</code> is created and the data is updated.</p>"},{"location":"pages/Update/#things-to-consider-drawbacks","title":"Things to consider / Drawbacks","text":""},{"location":"pages/Update/#isactiveentity-handling","title":"IsActiveEntity handling","text":"<p>The column <code>IsActiveEntity</code> states the current state of the object (Draft or Active). In the spreadsheet file, the current state must match the state of the object.</p> <p>\u2022 If the state is wrong, a warning is shown and the user can still continue. If the user continues, the object will be updated in the current state that the object is actually in.  For example, if in the spreadsheet file the <code>IsActiveEntity</code> column is set to <code>true</code> but the object is in draft mode, a warning will be shown, and if the user continues, the draft object will be updated with the data from the spreadsheet.</p>"},{"location":"pages/Update/#download-only-active-entities","title":"Download only Active Entities","text":"<p>If you download the data with the Spreadsheet Importer, only the active entities are downloaded. If you then update the data, the object will be updated in the current state that the object is in. So if the object is in draft mode, the data from the active state will still be used to update the draft object.</p>"},{"location":"pages/Update/#performance-and-batch-size","title":"Performance and batch size","text":"<p>Because the update needs extra requests (fetch of active and draft objects, plus partial updates), the update is slower than a create operation. For mass updates, this can take some time. Because of the performance considerations, the batch size for update is limited to 100 per batch.</p>"},{"location":"pages/Update/#filter-limitations","title":"Filter Limitations","text":"<p>When exporting the data, currently all the data is exported. Any filters in a List Report are not respected at the moment.</p>"},{"location":"pages/Update/#configuration","title":"Configuration","text":"<p>Below is a brief overview of the main configuration options relevant to updating. For the complete list, see the Configuration documentation.</p> Option Description Default <code>fullUpdate</code> Update all properties of the object (true). If false, only changed properties are updated. false <code>columns</code> Columns to update. all"},{"location":"pages/Update/#fullupdate","title":"fullUpdate","text":"<p>If <code>fullUpdate</code> is set to <code>true</code>, the component updates all properties of the object. If <code>fullUpdate</code> is set to <code>false</code> (default), only the properties that have changed are updated (partial update).</p>"},{"location":"pages/Update/#columns","title":"columns","text":"<p>The <code>columns</code> property is an array of strings. The strings are the names of the columns that should be updated. Columns that are not in the array will not be updated at all. This is useful if you only want to update a subset of properties.</p> <p>When using <code>fullUpdate = true</code>, the system will still honor <code>columns</code>\u2014only those columns listed will be sent in the update request. For unlisted columns, no updates will be sent.</p>"},{"location":"pages/UseCases/","title":"Use Cases","text":""},{"location":"pages/UseCases/#mass-creation","title":"Mass Creation","text":"<p>It is possible to use the Spreadsheet Component with big data sets and spreadsheet files. For example, we timed the upload of 10,000 rows.</p> Scenario Rows Time CAP, Object Page, Draft Mode, Remote CAP Server 10,090 01 Minute 28 seconds CAP, Object Page, Draft Mode, Local CAP Server 10,090 17 seconds CAP, List Report, Draft Mode incl. Draft Activation, Remote CAP Server 10,153 03 Minutes 49 seconds CAP, List Report, Draft Mode incl. Draft Activation, Local CAP Server 10,153 50 seconds <p>Obviously, the time depends on the network speed and the server performance. Also, if you use draft activation, the time will increase as the draft activation takes some time. The times are measured with the default batch size of 1000 rows. Changing the batch did not improve performance in our tests. Setting the batch size too high or disabling the batch upload can lead to memory issues and server errors.</p>"},{"location":"pages/UseCases/#quick-data-entry-for-custom-tables-with-fiori-elements","title":"Quick Data Entry for Custom Tables with Fiori Elements","text":"<p>One of the advantages of the UI5 SpreadsheetUpload component is its ability to quickly add data to custom tables in combination with Fiori Elements.</p> <p>With the template file in hand, users can simply fill in the necessary data in the Spreadsheet and then use the UI5 SpreadsheetUpload component to upload the data to the custom table in SAP. This can be a huge time-saver for projects that require frequent data entry, such as inventory management or order processing.</p> <p>In addition to simplifying the data entry process, the UI5 SpreadsheetUpload component also allows for advanced data validation and manipulation. For example, developers can define event handlers to check data for errors before it is uploaded or to transform data to conform to the target data model.</p>"},{"location":"pages/UseCases/#data-migration","title":"Data Migration","text":"<p>Data migration is a common scenario where the UI5 SpreadsheetUpload component can be useful. Companies often need to migrate data between systems, and a Spreadsheet is a common format for storing data. The component can simplify the process of uploading large Spreadsheet files containing data for migration. Especially useful is the export feature of tables in Fiori Elements, as the Spreadsheet export files can usually be uploaded again directly.</p> <p>When using the UI5 SpreadsheetUpload component for data migration, there are a few things to keep in mind. First, since the component reads the Spreadsheet files on the frontend, it's important to ensure that the files are properly formatted and contain the correct data before uploading them to the system. Second, since the data is sent in batches, it's important to adjust the batch size accordingly to prevent the batch from becoming too large and causing issues during migration. Finally, it's important to ensure that the data is properly validated and processed on the backend to ensure that it is accurately and securely migrated to the target system.</p>"},{"location":"pages/UseCases/#data-validation-and-reporting","title":"Data Validation and Reporting","text":"<p>In addition to data migration, the UI5 SpreadsheetUpload component can also be useful for data validation and reporting scenarios. Companies may need to validate data in Spreadsheet files before uploading it to the system or generate reports from data in Spreadsheet files. The component can allow users to upload Spreadsheet files containing data for validation or reporting purposes, and the data can be processed and validated on the backend to ensure accuracy and security.</p>"},{"location":"pages/UseCases/#data-entry","title":"Data Entry","text":"<p>In some cases, users may prefer to enter data into a Spreadsheet file rather than using a web form or UI5 app. The UI5 SpreadsheetUpload component can be used to allow users to upload Spreadsheet files containing data for entry into the system. This can be useful in scenarios where users are more comfortable working with Spreadsheets or need to enter large amounts of data quickly.</p>"},{"location":"pages/UseCases/#custom-integrations","title":"Custom Integrations","text":"<p>Finally, the UI5 SpreadsheetUpload component can be used to build custom integrations with other systems that use Spreadsheet files as a data interchange format. For example, the component could be used to allow users to upload Spreadsheet files to a cloud storage service like Dropbox or Google Drive or to integrate with other third-party systems that use Spreadsheet files for data exchange. With the ability to read and write Spreadsheet files in the frontend, the possibilities for custom integrations are nearly endless.</p>"},{"location":"pages/UserDocumentation/","title":"User Documentation","text":"<p>This User Documentation provides a brief overview of the Fiori Element Object Page scenario and uploading Order Items.</p> <p>1. Open the Spreadsheet Upload Dialog</p> <p></p> <p>2. Download the Template</p> <p>To ensure a smooth process without errors, it is recommended to always download a new template. However, if you are confident that the data structure has not changed, you may use a previously downloaded template.</p> <p></p> <p>3. Fill out the template</p> <p>Now, fill the template with the necessary data and save the file.</p> <p></p> <p>4. Upload File to Application</p> <p>You have multiple ways to provide your spreadsheet data:</p> <p>Option A: Upload File Click on the \"Browse\" button to upload the file.</p> <p>Option B: Drag &amp; Drop Simply drag your spreadsheet file directly onto the upload area.</p> <p>Option C: Paste Data \u2728 Available since v2.3.0</p> <ul> <li>Copy spreadsheet data from Excel/Google Sheets (Ctrl+C)</li> <li>Paste directly into the upload dialog (Ctrl+V)</li> <li>Or paste an entire .xlsx file that you've copied from your file system</li> </ul> <p>If the upload is successful, a message will appear saying \"Upload Successful.\"</p> <p></p> <p>5. Error Dialog</p> <p>During the upload process, various checks are performed in the background. If any errors are encountered, such as unfilled mandatory fields, they will be displayed in the error dialog.</p> <p></p> <p>6. Send Data to Backend</p> <p>If no errors appear, click the \"Upload\" button to send the data to the backend.</p> <p></p>"},{"location":"pages/Wizard/","title":"Wizard","text":"<p>The Wizard Dialog provides a guided, step-by-step interface for importing Spreadsheet files into your UI5 application. It offers enhanced user experience with automatic step progression, header validation, error handling, and data preview capabilities.</p>"},{"location":"pages/Wizard/#overview","title":"Overview","text":"<p>This feature is available since Spreadsheet Importer version 2.2.0</p> <p>Not usable in UI5 versions below 1.84</p> <p>The <code>sap.m.Wizard</code> used here is using the <code>Page</code> render mode, which is not available in UI5 versions below 1.84.</p> <p>The wizard is a alternative to the single-dialog approach with a multi-step guided process that guides users through each import step with clear instructions. A new feature compared to the single-dialog approach is the ability to select the correct line where the data is located in the spreadsheet in the wizard process. More features are planned for the future.</p>"},{"location":"pages/Wizard/#wizard-steps","title":"Wizard Steps","text":""},{"location":"pages/Wizard/#1-upload-file-step","title":"1. Upload File Step","text":"<ul> <li>Purpose: Select and upload Spreadsheet file</li> <li>Features:</li> <li>Drag &amp; drop support</li> <li>File validation</li> <li>Paste functionality \u2728 Available since v2.3.0<ul> <li>Paste copied spreadsheet data (Ctrl+V)</li> <li>Paste .xlsx files directly from clipboard</li> <li>Note: Paste only works on the Upload Step</li> </ul> </li> </ul> <p>Paste Functionality</p> <p>You can paste data directly from your clipboard instead of uploading a file. This works with:</p> <ul> <li>Copied spreadsheet data from Excel or Google Sheets</li> <li>.xlsx files copied from your file system</li> <li>Note: Paste functionality is only available on the Upload File Step</li> <li>Can be disabled using the <code>enablePaste</code> configuration option</li> </ul>"},{"location":"pages/Wizard/#2-header-selection-step-conditional","title":"2. Header Selection Step (Conditional)","text":"<ul> <li>Purpose: Map/fix column headers when header issues are detected</li> <li>When shown: Only appears when automatic header validation fails</li> <li>Features: Interactive table for header row selection, real-time validation</li> </ul>"},{"location":"pages/Wizard/#3-messages-step-conditional","title":"3. Messages Step (Conditional)","text":"<ul> <li>Purpose: Review and handle validation messages</li> <li>When shown: When validation errors exist (but headers are valid)</li> <li>Features: Categorized error display, continue anyway option, error download</li> </ul>"},{"location":"pages/Wizard/#4-preview-data-step","title":"4. Preview Data Step","text":"<ul> <li>Purpose: Review data before final import</li> <li>Features: Data table preview, final import confirmation</li> </ul>"},{"location":"pages/Wizard/#getting-started","title":"Getting Started","text":""},{"location":"pages/Wizard/#1-enable-wizard-mode","title":"1. Enable Wizard Mode","text":"<p>To use the wizard instead of the traditional dialog, set the <code>useImportWizard</code> property to <code>true</code>:</p> <pre><code>&lt;core:ComponentContainer\n  id=\"wizardSpreadsheetImporter\"\n  width=\"100%\"\n  usage=\"spreadsheetImporter\"\n  propagateModel=\"true\"\n  async=\"true\"\n  settings=\"{\n        useImportWizard: true,\n        debug: true,\n        createActiveEntity: true\n    }\"\n/&gt;\n</code></pre>"},{"location":"pages/Wizard/#2-configuration-options","title":"2. Configuration Options","text":"<p>The wizard supports all standard spreadsheet importer configuration options, plus:</p> Option Type Default Description <code>useImportWizard</code> <code>boolean</code> <code>false</code> Enables wizard mode instead of single dialog"},{"location":"pages/Wizard/#using-the-wizard-programmatically","title":"Using the Wizard Programmatically","text":""},{"location":"pages/Wizard/#openwizard-method","title":"openWizard() Method","text":"<p>You can open the wizard programmatically using the <code>openWizard()</code> method:</p> <pre><code>/**\n * Opens the wizard programmatically\n */\nopenWizard: async function () {\n      this.spreadsheetUpload = await this.getView()\n     .getController()\n     .getOwnerComponent()\n     .createComponent({\n      usage: \"spreadsheetImporter\",\n      async: true,\n      componentData: {\n       context: this,\n              useImportWizard: true\n      }\n     });\n    this.spreadsheetUpload.openWizard();\n}\n</code></pre>"},{"location":"pages/Wizard/#openwizard-with-options","title":"openWizard() with Options","text":"<p>You can pass configuration options to override component settings:</p> <pre><code>openWizard: function () {\n          this.spreadsheetUpload = await this.getView()\n     .getController()\n     .getOwnerComponent()\n     .createComponent({\n      usage: \"spreadsheetImporter\",\n      async: true,\n      componentData: {\n       context: this,\n      useImportWizard: true\n      }\n     });\n\n    // Configuration options to override component settings\n    const wizardOptions = {\n        strict: true,                    // Enable strict mode\n        batchSize: 500,                 // Override batch size\n        mandatoryFields: [\"ID\", \"Name\"], // Set mandatory fields\n        columns: [\"ID\", \"Name\", \"Email\"], // Limit columns\n        debug: true                      // Enable debug mode\n    };\n\n    oComponent.openWizard(wizardOptions)\n}\n</code></pre>"},{"location":"pages/Wizard/#events-and-error-handling","title":"Events and Error Handling","text":"<p>The wizard supports all standard events:</p> <pre><code>// Attach events before opening wizard\noComponent.attachUploadButtonPress(function (event) {\n  // Handle upload completion\n  const payload = event.getParameter('payload');\n  console.log('Data uploaded:', payload);\n});\n\noComponent.attachCheckBeforeRead(function (event) {\n  // Validate data before processing\n  const sheetData = event.getParameter('sheetData');\n  // Add custom validation logic\n});\n</code></pre>"},{"location":"pages/Wizard/#best-practices","title":"Best Practices","text":""},{"location":"pages/Wizard/#1-error-handling","title":"1. Error Handling","text":"<ul> <li>Always handle the promise returned by <code>openWizard()</code></li> <li>Provide user feedback for both success and error cases</li> <li>Use appropriate error messages for different scenarios</li> </ul>"},{"location":"pages/Wizard/#2-configuration","title":"2. Configuration","text":"<ul> <li>Use <code>debug: true</code> during development for detailed logging</li> <li>Set appropriate <code>batchSize</code> for your data volume</li> <li>Configure <code>mandatoryFields</code> for data validation</li> </ul>"},{"location":"pages/Wizard/#3-user-experience","title":"3. User Experience","text":"<ul> <li>Provide clear instructions about expected data format</li> <li>Use the template download feature for users</li> <li>Consider using <code>strict: false</code> to allow users to continue with warnings</li> </ul>"},{"location":"pages/Wizard/#4-performance","title":"4. Performance","text":"<ul> <li>Use <code>continueOnError: true</code> for large datasets</li> <li>Consider <code>createActiveEntity: true</code> for better performance in draft scenarios</li> <li>Optimize <code>batchSize</code> based on your backend capabilities</li> </ul>"},{"location":"pages/Wizard/#migration-from-classic-dialog","title":"Migration from Classic Dialog","text":"<p>To migrate from the classic dialog to the wizard:</p> <ol> <li>Add the wizard flag:</li> </ol> <pre><code>settings=\"{\n    useImportWizard: true,\n    // ... other existing settings\n}\"\n</code></pre> <ol> <li>Update method calls (optional):</li> </ol> <pre><code>// Old way\noComponent.openSpreadsheetUploadDialog(options);\n\n// New way (both work)\noComponent.openWizard(options);\n</code></pre> <ol> <li>Test the new flow: The wizard provides better error handling and user guidance while maintaining compatibility with existing configurations.</li> </ol>"},{"location":"pages/Wizard/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pages/Wizard/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Wizard doesn't open</p> </li> <li> <p>Ensure <code>useImportWizard: true</code> is set</p> </li> <li>Check component initialization</li> <li> <p>Verify component instance is available</p> </li> <li> <p>Steps not progressing</p> </li> <li> <p>Check browser console for validation errors</p> </li> <li>Verify file format is supported</li> <li> <p>Ensure headers match expected format</p> </li> <li> <p>Options not applied</p> </li> <li>Verify options object format</li> <li>Check for typos in option names</li> <li>Use browser developer tools to inspect settings</li> </ol> <p>For more troubleshooting information, see Troubleshooting.</p>"},{"location":"pages/Wizard/#wizard-flow","title":"Wizard Flow","text":"<p>The wizard intelligently adapts its flow based on the data quality and validation results. Here are the main user journey scenarios:</p>"},{"location":"pages/Wizard/#flow-element-legend","title":"Flow Element Legend","text":"<pre><code>flowchart LR\n    START((\"START&lt;br/&gt;END\"))\n    STEP[\"WIZARD&lt;br/&gt;STEP\"]\n    USER([\"USER&lt;br/&gt;ACTION\"])\n    PROCESS{{\"SYSTEM&lt;br/&gt;PROCESS\"}}\n    DECISION{\"DECISION&lt;br/&gt;POINT\"}\n\n    START -.-&gt; |\"Process Start/End\"| START\n    STEP -.-&gt; |\"UI Wizard Step\"| STEP\n    USER -.-&gt; |\"Button Press/User Action\"| USER\n    PROCESS -.-&gt; |\"Background Processing\"| PROCESS\n    DECISION -.-&gt; |\"Validation/Decision Logic\"| DECISION</code></pre>"},{"location":"pages/Wizard/#1-happy-path-no-issues","title":"1. Happy Path (No Issues)","text":"<p>Ideal Scenario</p> <p>When your file has perfect data with no validation issues, the wizard provides the fastest path to upload.</p> <pre><code>flowchart LR\n    START((\"START\")) --&gt; UPLOAD([\"UPLOAD&lt;br/&gt;FILE\"])\n    UPLOAD --&gt; PROCESS{{\"FILE&lt;br/&gt;PROCESS\"}}\n    PROCESS --&gt; VALIDATE{\"HEADER&lt;br/&gt;DATA&lt;br/&gt;VALIDATION\"}\n    VALIDATE --&gt;|All Valid| PREVIEW[\"PREVIEW&lt;br/&gt;STEP\"]\n    PREVIEW --&gt; CONFIRM([\"CONFIRM&lt;br/&gt;UPLOAD\"])\n    CONFIRM --&gt; UPLOAD_PROCESS{{\"UPLOAD&lt;br/&gt;PROCESS\"}}\n    UPLOAD_PROCESS --&gt; END((\"SUCCESS\"))</code></pre> <p>Flow Details:</p> <ol> <li>Start - User initiates wizard</li> <li>Upload File - User selects or drops file</li> <li>File Processing - System processes uploaded file</li> <li>Validation - Automatic header &amp; data validation</li> <li>Preview Step - Auto-advance to preview wizard step</li> <li>Confirm Upload - User presses confirm button</li> <li>Upload Process - System uploads data to backend</li> <li>Success - Upload completed successfully</li> </ol>"},{"location":"pages/Wizard/#2-header-issues-path","title":"2. Header Issues Path","text":"<p>Header Mismatch</p> <p>When column headers don't match the expected format, the wizard guides users through mapping.</p> <pre><code>flowchart LR\n    START((\"START\")) --&gt; UPLOAD([\"UPLOAD&lt;br/&gt;FILE\"])\n    UPLOAD --&gt; PROCESS{{\"FILE&lt;br/&gt;PROCESS\"}}\n    PROCESS --&gt; HEADER_CHECK{\"HEADER&lt;br/&gt;VALIDATION\"}\n    HEADER_CHECK --&gt;|Mismatch| HEADER_STEP[\"HEADER&lt;br/&gt;SELECT&lt;br/&gt;STEP\"]\n    HEADER_STEP --&gt; MAP_ACTION([\"MAP&lt;br/&gt;COLUMNS\"])\n    MAP_ACTION --&gt; REVALIDATE{{\"RE-VALIDATE&lt;br/&gt;PROCESS\"}}</code></pre> <pre><code>flowchart LR\n    REVALIDATE --&gt; DATA_CHECK{\"DATA&lt;br/&gt;VALIDATION\"}\n    DATA_CHECK --&gt;|Valid| PREVIEW[\"PREVIEW&lt;br/&gt;STEP\"]\n    PREVIEW --&gt; CONFIRM([\"CONFIRM&lt;br/&gt;UPLOAD\"])\n    CONFIRM --&gt; UPLOAD_PROCESS{{\"UPLOAD&lt;br/&gt;PROCESS\"}}\n    UPLOAD_PROCESS --&gt; END((\"SUCCESS\"))</code></pre> <p>Flow Details:</p> <ol> <li>Start - User initiates wizard</li> <li>Upload File - User selects file</li> <li>File Processing - System processes file</li> <li>Header Validation - Column mapping validation</li> <li>Header Selection Step - Wizard shows header mapping step</li> <li>Map Columns - User corrects column assignments</li> <li>Re-validation - System re-validates with new mapping</li> <li>Data Validation - Verify data quality</li> <li>Preview Step - Review mapped data</li> <li>Confirm Upload - User confirms final upload</li> <li>Upload Process - System processes upload</li> <li>Success - Upload completed</li> </ol>"},{"location":"pages/Wizard/#3-validation-errors-path","title":"3. Validation Errors Path","text":"<p>Data Quality Issues</p> <p>When data has validation errors but headers are correct, users can review and decide how to proceed.</p> <pre><code>flowchart LR\n    START((\"START\")) --&gt; UPLOAD([\"UPLOAD&lt;br/&gt;FILE\"])\n    UPLOAD --&gt; PROCESS{{\"FILE&lt;br/&gt;PROCESS\"}}\n    PROCESS --&gt; HEADER_CHECK{\"HEADER&lt;br/&gt;VALIDATION\"}\n    HEADER_CHECK --&gt;|Valid| DATA_CHECK{\"DATA&lt;br/&gt;VALIDATION\"}\n    DATA_CHECK --&gt;|Has Errors| MESSAGES[\"MESSAGES&lt;br/&gt;STEP\"]\n    MESSAGES --&gt; REVIEW([\"REVIEW&lt;br/&gt;ERRORS\"])\n    REVIEW --&gt; DECISION{\"USER&lt;br/&gt;DECISION\"}\n    DECISION --&gt;|Continue Anyway| PREVIEW[\"PREVIEW&lt;br/&gt;STEP\"]\n    DECISION --&gt;|Fix File| UPLOAD\n    PREVIEW --&gt; CONFIRM([\"CONFIRM&lt;br/&gt;UPLOAD\"])\n    CONFIRM --&gt; UPLOAD_PROCESS{{\"UPLOAD&lt;br/&gt;PROCESS\"}}\n    UPLOAD_PROCESS --&gt; END((\"SUCCESS\"))</code></pre> <p>Flow Details:</p> <ol> <li>Start - User initiates wizard</li> <li>Upload File - User selects file</li> <li>File Processing - System processes file</li> <li>Header Validation - Column mapping successful</li> <li>Data Validation - System finds data issues</li> <li>Messages Step - Wizard shows messages step</li> <li>Review Errors - User reviews detailed error messages</li> <li>User Decision - User chooses to proceed or fix</li> <li>Preview Step - Review data with errors highlighted</li> <li>Confirm Upload - User confirms upload with warnings</li> <li>Upload Process - System processes upload</li> <li>Success - Upload completed with warnings</li> </ol>"},{"location":"pages/Wizard/#wizard-state-machine","title":"Wizard State Machine","text":"<p>The wizard follows a state machine pattern that intelligently routes users based on validation results:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; Upload : Start\n\n    Upload --&gt; HeaderCheck : File Selected\n\n    HeaderCheck --&gt; HeaderSelection : Headers Invalid\n    HeaderCheck --&gt; DataValidation : Headers Valid\n\n    HeaderSelection --&gt; HeaderMapping : Show Interface\n    HeaderMapping --&gt; DataValidation : Headers Fixed\n\n    DataValidation --&gt; Messages : Validation Errors\n    DataValidation --&gt; Preview : Data Valid\n\n    Messages --&gt; UserDecision : Show Error Details\n    UserDecision --&gt; Preview : Continue Anyway\n    UserDecision --&gt; Upload : Fix File Externally\n\n    Preview --&gt; Confirm : Review Data\n    Confirm --&gt; Success : Upload Complete\n    Success --&gt; [*] : Done\n\n    state HeaderCheck {\n        [*] --&gt; CheckColumns\n        CheckColumns --&gt; [*]\n    }\n\n    state DataValidation {\n        [*] --&gt; ValidateRows\n        ValidateRows --&gt; CheckBusinessRules\n        CheckBusinessRules --&gt; [*]\n    }</code></pre>"},{"location":"pages/spreadsheetdownload/","title":"Spreadsheet Deep Download","text":"<p>Warning</p> <p>This new feature is available since version 1.5.0 and experimental and may change in the future and currently only available for OData V4. If you deep download data, the OData Service need to support <code>expand</code>.</p> <p>This feature downloads data from the backend and converts it to a Spreadsheet file.</p> <p>The main difference between this feature and the integrated Spreadsheet Download is that it can download data from multiple sub-entities at once.</p> <p>For example, if you have Orders and OrderItems, you can download both entities at once and the data will be structured in the Spreadsheet. It is also possible to recursively download data from multiple entities indefinitely.</p> <ul> <li>Orders</li> <li>OrderItems<ul> <li>Info</li> </ul> </li> <li>ShippingInfos</li> </ul> <p>This means that you can download all Orders, including the OrderItems, ShippingInfos, and the Info of the OrderItems in one go.</p>"},{"location":"pages/spreadsheetdownload/#configuration","title":"Configuration","text":"Option Description Default Type <code>addKeysToExport</code> Adds keys to the export file <code>false</code> boolean <code>setDraftStatus</code> Sets the draft status in <code>IsActiveEntity</code> <code>false</code> boolean <code>filename</code> Defines the filename for the export file Entity Name string <code>deepExport</code> Turn on to export of sibling entities <code>false</code> boolean <code>deepLevel</code> Defines the level of sibling entities to export <code>0</code> number <code>showOptions</code> Shows options dialog for users <code>false</code> boolean <code>columns</code> Defines the columns to export <code>{}</code> object or array"},{"location":"pages/spreadsheetdownload/#sample-usage","title":"Sample Usage","text":"<p>The configuration is done in the <code>deepDownloadConfig</code> section of the component data:</p> <pre><code>componentData: {\n    context: this,\n    showDownloadButton: true,\n    deepDownloadConfig: {\n        deepLevel: 1,\n        deepExport: false,\n        addKeysToExport: false,\n        showOptions: false,\n        columns : {\n            \"OrderNo\":{\n                \"order\": 1\n            },\n            \"buyer\": {\n                \"order\": 3\n            },\n            \"Items\": {\n                \"quantity\" : {\n                    \"order\": 2\n                },\n                \"title\": {\n                    \"order\": 4\n                }\n            },\n            \"Shipping\": {\n                \"address\" : {\n                    \"order\": 5\n                },\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pages/spreadsheetdownload/#columns","title":"columns","text":"<p>default: <code>{}</code></p> <p>This option defines the columns to export. By default, all columns are exported. It is possible to define the order of the columns by using the <code>order</code> property. To know which columns are available, it is possible to turn on <code>debug</code> as an option. With this option, the <code>mainEntity</code> is logged and then you can use it as a reference.</p> <p>It is also possible to define the columns as an array of strings but only if the deepLevel is 0.</p>"},{"location":"pages/spreadsheetdownload/#addkeystoexport","title":"addKeysToExport","text":"<p>default: <code>false</code></p> <p>This option adds keys (which can be hidden in the UI) to the export, such as GUIDs.</p>"},{"location":"pages/spreadsheetdownload/#setdraftstatus","title":"setDraftStatus","text":"<p>default: <code>true</code></p> <p>If the option <code>addKeysToExport</code> is set to <code>true</code> the keys, including the <code>IsActiveEntity</code> field, are added to the export. By default, the field <code>IsActiveEntity</code> is set to <code>false</code> if the field <code>HasDraftEntity</code> is set to <code>true</code>. This makes it easier to identify which rows have a draft entity for the reupload to update the entities. This option is only used if all the <code>IsActiveEntity</code> fields should be set to <code>true</code> in the export.</p>"},{"location":"pages/spreadsheetdownload/#filename","title":"filename","text":"<p>default: Entity Name of Root Entity</p> <p>This option defines the filename for the export XLSX file.</p>"},{"location":"pages/spreadsheetdownload/#deepexport","title":"deepExport","text":"<p>default: <code>false</code></p> <p>This option determines whether sibling entities should be exported as well. If the deepExport is set to <code>false</code>, the deepLevel is set to <code>0</code>.</p>"},{"location":"pages/spreadsheetdownload/#deeplevel","title":"deepLevel","text":"<p>default: <code>0</code></p> <p>This option defines how deep sibling entities should be exported. If the deepLevel is greater than 0, the columns option must a object. If the deepLevel is 0, <code>deepExport</code> is set to <code>false</code>. If the deepLevel is greater than 0, <code>deepExport</code> is set to <code>true</code>.</p>"},{"location":"pages/spreadsheetdownload/#showoptions","title":"showOptions","text":"<p>default: <code>true</code></p> <p>This option determines whether the options dialog should be shown to the user.</p>"},{"location":"pages/spreadsheetdownload/#api","title":"API","text":""},{"location":"pages/spreadsheetdownload/#triggerdownloadspreadsheet","title":"triggerDownloadSpreadsheet","text":"<p>This method triggers the Spreadsheet Download without the need to open the spreadsheet upload dialog. The input parameter for <code>triggerDownloadSpreadsheet</code> is the same as the configuration for the <code>deepDownloadConfig</code>. You can overwrite the configuration from the component data by passing the configuration to the <code>triggerDownloadSpreadsheet</code> method.</p> <pre><code>download: async function () {\n    this.spreadsheetUpload = await this.editFlow\n        .getView()\n        .getController()\n        .getAppComponent()\n        .createComponent({\n            usage: \"spreadsheetImporter\",\n            async: true,\n            componentData: {\n                context: this,\n                activateDraft: true,\n                deepDownloadConfig: {\n                    deepLevel: 1,\n                    deepExport: true,\n                    addKeysToExport: true\n                }\n            }\n        });\n    this.spreadsheetUpload.triggerDownloadSpreadsheet({\n        deepLevel: 2,\n        deepExport: true,\n        addKeysToExport: true\n    });\n}\n</code></pre>"},{"location":"pages/spreadsheetdownload/#events","title":"Events","text":"<p>See more details at Events</p>"},{"location":"pages/spreadsheetdownload/#beforedownloadfileprocessing","title":"<code>beforeDownloadFileProcessing</code>","text":"<p>This event is fired before the data is converted to a spreadsheet file. Use this event to manipulate the data before it is converted. You can change directly the data parameter of the event as this is a reference to the data.</p>"},{"location":"pages/spreadsheetdownload/#beforedownloadfileexport","title":"<code>beforeDownloadFileExport</code>","text":"<p>This event is fired just before the file is downloaded. Use this event to manipulate the filename or other parameters before the file is downloaded.</p>"},{"location":"pages/spreadsheetdownload/#download-button","title":"Download Button","text":"<p>Same as the Button control, the Download Button can be used to trigger the Spreadsheet Download directly in the XML View. A sample usage can be found here. For the configuration options, see componentContainerData Configuration.</p> <p>A usage can look like this:</p> <pre><code>&lt;mvc:View controllerName=\"ordersv4freestyle.controller.MainView\"\n    xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" displayBlock=\"true\"\n    xmlns=\"sap.m\"&gt;\n    &lt;Page id=\"page\" title=\"{i18n&gt;title}\"&gt;\n        &lt;content&gt;\n            &lt;VBox&gt;\n                &lt;core:ComponentContainer\n                    id=\"test\"\n                    width=\"100%\"\n                    usage=\"spreadsheetImporter\"\n                    propagateModel=\"true\"\n                    async=\"true\"\n                    settings=\"{\n                    componentContainerData:{uploadButtonPress:'uploadButtonPress',buttonText:'Excel Download',buttonId:'downloadButton',downloadButton:true},\n                    deepDownloadConfig:{\n                        deepLevel: 0,\n                        deepExport: false,\n                        addKeysToExport: true,\n                        showOptions: false,\n                        filename: 'Orders12',\n                        columns : [\"OrderNo\"]\n                      }\n                    }\n                  }\"\n                /&gt;\n                &lt;Button id=\"downloadButtonCode\" text=\"Excel Download Code\" press=\"onDownload\"/&gt;\n                &lt;Table id=\"ordersTable\" items=\"{/Orders}\"&gt;\n                    &lt;columns&gt;\n                        &lt;Column&gt;\n                            &lt;Text text=\"Order Number\"/&gt;\n                        &lt;/Column&gt;\n                        &lt;Column&gt;\n                            &lt;Text text=\"Buyer\"/&gt;\n                        &lt;/Column&gt;\n                        &lt;Column&gt;\n                            &lt;Text text=\"Created At\"/&gt;\n                        &lt;/Column&gt;\n                    &lt;/columns&gt;\n                    &lt;items&gt;\n                        &lt;ColumnListItem&gt;\n                            &lt;cells&gt;\n                                &lt;Text text=\"{OrderNo}\"/&gt;\n                                &lt;Text text=\"{buyer}\"/&gt;\n                                &lt;Text text=\"{createdAt}\"/&gt;\n                            &lt;/cells&gt;\n                        &lt;/ColumnListItem&gt;\n                    &lt;/items&gt;\n                &lt;/Table&gt;\n            &lt;/VBox&gt;\n        &lt;/content&gt;\n    &lt;/Page&gt;\n&lt;/mvc:View&gt;\n</code></pre>"},{"location":"pages/Development/Docs/","title":"Documentation","text":""},{"location":"pages/Development/Docs/#static-site-generator","title":"Static Site Generator","text":"<p>The documentation is set up with MkDocs and Material for MkDocs.</p>"},{"location":"pages/Development/Docs/#usage","title":"Usage","text":""},{"location":"pages/Development/Docs/#configuration","title":"Configuration","text":"<p>The configuration is in the <code>mkdocs.yml</code> file. The pages and images are stored in the <code>docs</code> folder.</p>"},{"location":"pages/Development/Docs/#local-setup","title":"Local Setup","text":"<p>To run the docs locally, you can use Docker. To build the Docker image, run:</p> <pre><code>docker build . -t mkdocs\n</code></pre> <p>To run the container:</p> <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material\n</code></pre> <p>or</p> <pre><code>npm run runDocs\n</code></pre> <p>and then open http://localhost:8000.</p>"},{"location":"pages/Development/Docs/#prod-build","title":"Prod Build","text":"<p>The Documentation is hosted on GitHub Pages and is rebuilt on every push to the <code>main</code> branch using the GitHub Action <code>pushDocs.yml</code> and forcefully pushed to the <code>gh-deploy</code> branch. The current URL is: https://docs.spreadsheet-importer.com/</p>"},{"location":"pages/Development/GettingStarted/","title":"Getting Started","text":""},{"location":"pages/Development/GettingStarted/#quick-setup-with-github-codespaces","title":"Quick Setup with GitHub Codespaces","text":"<p>The <code>postCreateCommand</code> will automatically install all dependencies. This will take a few minutes.</p> <p></p>"},{"location":"pages/Development/GettingStarted/#local-setup","title":"Local Setup","text":""},{"location":"pages/Development/GettingStarted/#requirements","title":"Requirements","text":"<ul> <li>Node.js Versions 16.18.0, 18.12.0, or later</li> </ul>"},{"location":"pages/Development/GettingStarted/#install-required-npm-packages","title":"Install required NPM Packages","text":"<pre><code># npm is already available by default\n\n# Install @sap/cds-dk if needed\nnpm i -g @sap/cds-dk\n</code></pre>"},{"location":"pages/Development/GettingStarted/#quick-start","title":"Quick start","text":"<p>To quickly start the test environment, see here. See detailed information below.</p> <pre><code>git clone https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter\nnpm install --legacy-peer-deps\n# will run `build` and start CAP Server and FE Apps V4 1.108\nnpm start\n</code></pre>"},{"location":"pages/Development/GettingStarted/#setup-ui5-cc-spreadsheetimporter","title":"Setup <code>ui5-cc-spreadsheetimporter</code>","text":"<p>This is the basic setting-up to continue with the next steps.</p> <pre><code># Clone GitHub Repo\ngit clone https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter\n\n# Install all packages including for test environment\nnpm install --legacy-peer-deps\n</code></pre>"},{"location":"pages/Development/GettingStarted/#start-developing","title":"Start Developing","text":""},{"location":"pages/Development/GettingStarted/#start-cap-server","title":"Start CAP server","text":"<p>The CAP Server is currently very basic and provides an Order Entity with OrderItems. All the apps will consume from this server.</p> <pre><code># Start CAP Server (serves data for all Test Apps)\nnpm run start:server\n</code></pre>"},{"location":"pages/Development/GettingStarted/#build-step","title":"Build Step","text":"<p>The apps get the Spreadsheet Importer Component with the middleware <code>ui5-middleware-ui5</code>. With this, no build step is necessary. To make this work, in the <code>ui5-cc-spreadsheetimporter</code> folder, the dist folder should be empty with only the <code>.gitkeep</code> file. If a build step was executed and the dist folder is not empty, the app will only load the built version.</p>"},{"location":"pages/Development/GettingStarted/#start-ui5-apps","title":"Start UI5 Apps","text":"<p>Under the folder <code>./examples/packages</code> are all the UI5 Apps that are set up for the Consumption of the Custom Control. There are five different apps for different scenarios (OData V2 Fiori Elements, V2 Freestyle, V2 FE Non Draft, V4 FE, V4 FPM). There are currently only with version <code>1.136</code>. For testing, these apps are copied and tested with other maintenance versions including <code>1.120</code>, <code>1.108</code>, <code>1.96</code>, <code>1.84</code>, and <code>1.71</code>. If you want to test with lower maintenance versions, just run this command: <code>npm run copyTestApps</code> This will copy the apps according to this json file.</p> <pre><code># Start Test Apps\nnpm run start:v4fe:108\nnpm run start:v2fe:108\n\n# Alternative with npm workspaces\nnpm run start --workspace=ordersv2fe108\nnpm run start --workspace=ordersv4fe108\n\n# Run other apps after copying\nnpm run start --workspace=ordersv2fe96\nnpm run start --workspace=ordersv2fe84\nnpm run start --workspace=ordersv2fe71\nnpm run start --workspace=ordersv4fe96\n...\n</code></pre>"},{"location":"pages/Development/GettingStarted/#run-wdi5-tests","title":"Run wdi5 Tests","text":"<p>To run the wdi5 tests, the CAP server and the corresponding app must already be running. You can run the test for the OData V4 UI5 Version 108 with this command:</p> <pre><code>npm run test:v4fe:108\n</code></pre> <p>More Info on the wdi5 Tests site.</p>"},{"location":"pages/Development/GettingStarted/#commit-message","title":"Commit Message","text":"<p>To create an automatic changelog, we use the angular commit message guidelines.</p> <p>The commit starts with the <code>type</code> and an optional <code>scope</code> like <code>feat(api)</code>. Possible types are listed here. Scopes can be freely named or omitted.</p> <p>A few examples:</p> <ul> <li><code>feat(api): add new create api for customer</code></li> <li><code>fix(api): edge case when customer is from EU</code></li> <li><code>chore(workflow): changed commiting username</code></li> <li><code>docs: typo in readme</code></li> </ul>"},{"location":"pages/Development/GitHubActions/","title":"GitHub Actions","text":""},{"location":"pages/Development/GitHubActions/#docs","title":"Docs","text":"<p>The GitHub Actions <code>docs</code> is defined in the <code>pushDocs.yml</code> file. The content of the docs is in the <code>docs</code> folder and the config file is <code>mkdocs.yml</code>.</p> <p>In an Ubuntu environment, the workflow will set up Python and install <code>mkdocs-material</code> and <code>mkdocs-minify-plugin</code>. With <code>mkdocs gh-deploy --force</code>, the docs site will be pushed to the <code>gh-docs</code> branch and then published with GitHub Pages to https://docs.spreadsheet-importer.com/.</p>"},{"location":"pages/Development/GitHubActions/#wdi5","title":"wdi5","text":"<p>With wdi5, it is possible to test an E2E Scenaro with UI5 automatically in GitHub Actions. In order to cover as many scenarios as possible, this workflow will cover as many scenarios as possible.</p> <p>To avoid writing a separate configuration and workflow for each scenario, we use the matrix function of GitHub Actions. This means that we only have to define the workflow once, and it is executed as often as necessary.</p> <p>The workflow is defined in the <code>wdi5-test.yml</code> file. The following steps are currently executed in a Ubuntu environment with matrix:</p> <ol> <li>Update Chrome in Ubuntu to the latest version.</li> <li>Checkout the <code>ui5-cc-spreadsheetimporter</code> repo.</li> <li>Use <code>npm</code> (already available).</li> <li>Install Node 16.</li> <li>Get the port of the current scenario App (i.e., for <code>ordersv4fe</code>, the port is 8080).</li> <li>With the port, we can check if the app is running.</li> <li>Run <code>npm install --legacy-peer-deps</code>.</li> <li>Build <code>ui5-cc-spreadsheetimporter</code>.</li> <li>Start CAP Server (for all scenarios the same).</li> <li> <p>Start the Scenario App</p> </li> <li> <p>For example, the matrix variables in <code>start:silent&amp;</code> are used like:</p> </li> </ol> <p><code>npm run start:silent --workspace=${{ matrix.scenario }}${{ matrix.ui5version }} &amp;</code>    which can be: <code>npm run start --workspace=ordersv4fe108</code></p> <ol> <li> <p>Start wdi5 Tests</p> <p>a. First check if the server and app are running.</p> <p>b. Start wdi5 test <code>headless</code> for the current scenario.</p> <p>c. So <code>npm run test --workspace=ui5-cc-spreadsheetimporter-sample -- -- --headless ${{ matrix.scenario }} ${{ matrix.ui5version }}</code> will be <code>npm run test --workspace=ui5-cc-spreadsheetimporter-sample -- -- ordersv4fe 108</code></p> </li> </ol>"},{"location":"pages/Development/GitHubActions/#start-wdi5-tests","title":"Start wdi5 Tests","text":"<p>Because we use only one <code>wdio-base.conf.js</code>, we must and can only test this one scenario with the names of the scenario. We can pass parameters there when we call the test with <code>\"test\": \"wdio run ./test/wdio-base.conf.js\"</code>. So in GitHub, it will be called with <code>npm run test --workspace=ui5-cc-spreadsheetimporter-sample -- -- ordersv4fe 108</code>. With these parameters, we can assign the appropriate port and spec files in the <code>wdio-base.conf.js</code> and read them from <code>testapps.json</code>. We try to ensure that all spec files apply to all scenarios, but certain ones can only be tested with OData V4, for example.</p>"},{"location":"pages/Development/GitHubActions/#release-please-action","title":"Release Please Action","text":"<p>For automatic versioning and changelog generation, we use release-please-action, which allows everything to be done with GitHub Actions. This workflow is defined in release-please.yml.</p> <p>This workflow will create a Pull Request if a <code>fix:</code> or <code>feat:</code> commit is pushed to the <code>main</code> branch. This Pull Request contains all changes, like the updated version and Changelog. In addition, scripts run to change the version in other files. In this commit, you can see which files are updated with these scripts. For example, in <code>ui5.yaml</code> and the sample apps.</p> <p>After this Pull Request is merged, the <code>ui5-cc-spreadsheetimporter</code> will be built and published to npm automatically.</p>"},{"location":"pages/Development/PrettierAndCommitlint/","title":"Prettier &amp; Commit Message Linting","text":"<p>This page documents the code formatting and commit message standards for this project.</p>"},{"location":"pages/Development/PrettierAndCommitlint/#prettier-setup","title":"Prettier Setup","text":"<p>The project uses a unified Prettier configuration managed from the root level that formats the entire project, including all packages.</p>"},{"location":"pages/Development/PrettierAndCommitlint/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>.prettierrc.json</code> - Root-level Prettier configuration that applies to the entire project</li> <li><code>.prettierignore</code> - Specifies which files to ignore during formatting</li> <li><code>package.json</code> - Contains lint-staged configuration for git hooks</li> </ul>"},{"location":"pages/Development/PrettierAndCommitlint/#prettier-configuration-details","title":"Prettier Configuration Details","text":"<pre><code>{\n  \"singleQuote\": false,\n  \"printWidth\": 200,\n  \"endOfLine\": \"lf\",\n  \"tabWidth\": 4,\n  \"useTabs\": true,\n  \"trailingComma\": \"none\",\n  \"overrides\": [\n    {\n      \"files\": [\"*.yaml\", \"*.yml\", \"*.md\", \"*.json\", \"*.xml\", \"*.properties\"],\n      \"options\": {\n        \"useTabs\": false,\n        \"tabWidth\": 2\n      }\n    }\n  ],\n  \"plugins\": [\"@prettier/plugin-xml\", \"prettier-plugin-properties\"]\n}\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#supported-file-types","title":"Supported File Types","text":"<p>The configuration handles all project file types:</p> <ul> <li>JavaScript/TypeScript: <code>*.js</code>, <code>*.jsx</code>, <code>*.ts</code>, <code>*.tsx</code>, <code>*.d.ts</code></li> <li>Markup: <code>*.xml</code>, <code>*.html</code></li> <li>Styles: <code>*.css</code></li> <li>Data: <code>*.json</code>, <code>*.yaml</code>, <code>*.yml</code>, <code>*.properties</code></li> <li>Documentation: <code>*.md</code></li> </ul>"},{"location":"pages/Development/PrettierAndCommitlint/#available-commands","title":"Available Commands","text":""},{"location":"pages/Development/PrettierAndCommitlint/#manual-formatting","title":"Manual Formatting","text":"<pre><code># Format all files in the project\nnpm run prettier\n\n# Check formatting without making changes\nnpm run prettier:check\n\n# Run lint-staged (used by git hooks)\nnpm run lint:staged\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#manual-prettier-commands","title":"Manual Prettier Commands","text":"<pre><code># Format entire project\nprettier --write .\n\n# Check formatting\nprettier --check .\n\n# Format specific file types\nprettier --write \"**/*.{js,ts,json,xml,yaml,yml,md,css,html,properties}\"\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#git-integration","title":"Git Integration","text":""},{"location":"pages/Development/PrettierAndCommitlint/#pre-commit-hook","title":"Pre-commit Hook","text":"<p>The pre-commit hook automatically runs Prettier on all staged files:</p> <pre><code>#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\necho \"Running lint-staged on all staged files in the repo...\"\nnpx lint-staged --relative\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#lint-staged-configuration","title":"Lint-staged Configuration","text":"<p>Located in root <code>package.json</code>:</p> <pre><code>{\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx,json,md,yaml,yml,css,html,xml,properties,d.ts}\": [\"prettier --write\"]\n  }\n}\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#what-gets-ignored","title":"What Gets Ignored","text":"<p>The <code>.prettierignore</code> file excludes:</p> <ul> <li>Build outputs (<code>/docs/**</code>, <code>/webapp/**</code>, <code>/dev/**</code>, <code>/dist/**</code>)</li> <li>Dependencies (<code>node_modules</code>)</li> <li>Generated files (<code>*.gen.d.ts</code>)</li> <li>Binary files (<code>*.svg</code>, <code>*.png</code>)</li> <li>Package lock files</li> </ul>"},{"location":"pages/Development/PrettierAndCommitlint/#commit-message-linting","title":"Commit Message Linting","text":"<p>The project enforces Conventional Commit format for all commit messages.</p>"},{"location":"pages/Development/PrettierAndCommitlint/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#allowed-types","title":"Allowed Types","text":"<ul> <li>feat: New feature</li> <li>fix: Bug fix</li> <li>docs: Documentation changes</li> <li>style: Code style changes (formatting, missing semicolons, etc.)</li> <li>refactor: Code refactoring without functional changes</li> <li>perf: Performance improvements</li> <li>test: Adding or updating tests</li> <li>build: Build system or dependency changes</li> <li>ci: CI/CD pipeline changes</li> <li>chore: Maintenance tasks</li> <li>revert: Reverting previous commits</li> </ul>"},{"location":"pages/Development/PrettierAndCommitlint/#examples","title":"Examples","text":"<pre><code># Good commit messages\nfeat: add spreadsheet import validation\nfix: resolve memory leak in file parser\ndocs: update API documentation\nstyle: format code with prettier\nrefactor: extract utility functions\nperf: optimize large file processing\ntest: add unit tests for upload service\nbuild: update dependencies\nci: add automated testing workflow\nchore: update .gitignore\n\n# Bad commit messages\nAdd new feature\nFixed bug\nUpdate\nWIP\nasdf\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#configuration","title":"Configuration","text":"<p>Commitlint is configured in <code>commitlint.config.js</code>:</p> <pre><code>module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'build', 'ci', 'chore', 'revert']],\n    'type-case': [2, 'always', 'lower-case'],\n    'type-empty': [2, 'never'],\n    'subject-empty': [2, 'never'],\n    'subject-full-stop': [2, 'never', '.'],\n    'header-max-length': [2, 'always', 100]\n  }\n};\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#git-integration_1","title":"Git Integration","text":""},{"location":"pages/Development/PrettierAndCommitlint/#commit-msg-hook","title":"Commit-msg Hook","text":"<p>The commit-msg hook validates commit messages:</p> <pre><code>#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\n# Validate commit message format using root level config\necho \"Validating commit message...\"\nnpx commitlint --edit $1\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#workflow","title":"Workflow","text":"<p>When you commit changes:</p> <ol> <li>Pre-commit: Prettier automatically formats all staged files</li> <li>Commit-msg: Validates that your commit message follows conventional format</li> <li>Commit succeeds only if both checks pass</li> </ol>"},{"location":"pages/Development/PrettierAndCommitlint/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pages/Development/PrettierAndCommitlint/#formatting-issues","title":"Formatting Issues","text":"<pre><code># Manually format all files\nnpm run prettier\n\n# Check what would be formatted\nnpm run prettier:check\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#commit-message-issues","title":"Commit Message Issues","text":"<pre><code># Check your commit message format\necho \"feat: your message here\" | npx commitlint\n\n# Amend commit message\ngit commit --amend -m \"feat: proper conventional commit message\"\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#hook-issues","title":"Hook Issues","text":"<pre><code># Reinstall hooks\nnpm run prepare\n\n# Make hooks executable\nchmod +x .husky/pre-commit .husky/commit-msg\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#ide-integration","title":"IDE Integration","text":""},{"location":"pages/Development/PrettierAndCommitlint/#vs-code","title":"VS Code","text":"<p>Install the Prettier extension and add to your settings:</p> <pre><code>{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true\n  }\n}\n</code></pre>"},{"location":"pages/Development/PrettierAndCommitlint/#webstormintellij","title":"WebStorm/IntelliJ","text":"<ol> <li>Go to Settings \u2192 Languages &amp; Frameworks \u2192 JavaScript \u2192 Prettier</li> <li>Check \"On 'Reformat Code' action\"</li> <li>Check \"On save\"</li> <li>Set \"Run for files\" to match your project patterns</li> </ol>"},{"location":"pages/Development/PrettierAndCommitlint/#resources","title":"Resources","text":"<ul> <li>Prettier Documentation</li> <li>Conventional Commits</li> <li>Commitlint</li> <li>Husky</li> <li>Lint-staged</li> </ul>"},{"location":"pages/Development/SampleApps/","title":"Sample Apps","text":"<p>On the Page Supported Versions you can see which versions are supported. To make sure all those versions are supported, tests are run with the sample apps. I also make these sample apps available to you on the Live Demo.</p>"},{"location":"pages/Development/SampleApps/#docker","title":"Docker","text":"<p>To make the deployment of the sample apps to the server providing the Live Demo easier, I use Docker. The Dockerfile is available in the examples folder (see Dockerfile). The Dockerfile is created on every push to the main branch (see GitHub Workflow), pushed to the Docker Hub, and then deployed to the server. The Docker image is build for AMD64 and ARM64 platforms.</p>"},{"location":"pages/Development/SampleApps/#how-to-use-the-dockerfile","title":"How to use the Dockerfile","text":""},{"location":"pages/Development/SampleApps/#pull-the-docker-image","title":"Pull the Docker Image","text":"<pre><code>docker pull greatoceandrive/ui5-spreadsheet-importer-examples\n</code></pre>"},{"location":"pages/Development/SampleApps/#run-the-docker-image","title":"Run the Docker Image","text":"<pre><code>docker run -p 4004:4004 greatoceandrive/ui5-spreadsheet-importer-examples\n</code></pre>"},{"location":"pages/Development/SampleApps/#build-the-docker-image-yourself-optional","title":"Build the Docker Image yourself (optional)","text":"<pre><code>git clone https://github.com/spreadsheetimporter/ui5-cc-spreadsheetimporter\ncd ui5-cc-spreadsheetimporter\ndocker build -t ui5-spreadsheet-importer-examples -f examples/Dockerfile .\ndocker run -p 4004:4004 ui5-spreadsheet-importer-examples\n</code></pre>"},{"location":"pages/Development/SpreadsheetDownload/","title":"Deep Download Feature","text":"<p>This feature is experimental and only available with an OData V4 backend. It allows downloading data from OData V4 backends with support for nested entities and relationships, handling complex data structures efficiently.</p>"},{"location":"pages/Development/SpreadsheetDownload/#triggering-the-download","title":"Triggering the Download","text":"<p>The spreadsheet download is triggered by a button in the spreadsheet upload dialog. This process is managed by the <code>SpreadsheetUploadDialog.ts</code> file.</p> <ul> <li> <p>onInitDownloadSpreadsheetProcess: This method initializes the download process. If <code>config.showOptions</code> is true, it opens the <code>SpreadsheetDownloadDialog</code> to allow users to set options. Otherwise, it triggers the download directly with default settings.</p> </li> <li> <p>onSave: This method in <code>SpreadsheetDownloadDialog.ts</code> sets the <code>deepDownloadConfig</code> and calls <code>onDownloadDataSpreadsheet</code>.</p> </li> </ul>"},{"location":"pages/Development/SpreadsheetDownload/#method-ondownloaddataspreadsheet","title":"Method onDownloadDataSpreadsheet","text":"<p>This method checks for errors before proceeding with the download. Errors can occur in the <code>setContext</code> method of <code>SpreadsheetUpload.ts</code>.</p>"},{"location":"pages/Development/SpreadsheetDownload/#metadatahandlerv4","title":"MetadataHandlerV4","text":"<p>The <code>MetadataHandlerV4</code> class builds the metadata model, which is a tree of all entities and their properties. The <code>entityName</code> should be the root entity of the download, and <code>deepLevel</code> should be the maximum depth of the download.</p> <ul> <li>_findEntitiesByNavigationProperty: This method traverses the metadata model and collects all entities related to the root entity by navigation properties. If the <code>$kind</code> and <code>$Partner</code> properties are present and the <code>$ReferentialConstraint</code> is not, the full entity is added to the parent entity as <code>$XYZEntity</code>, making it explicitly fetchable with <code>$XYZFetchableEntity</code>.</li> </ul>"},{"location":"pages/Development/SpreadsheetDownload/#json-sample","title":"JSON Sample","text":"<p>This is the root entity without some properties for brevity before the navigation property was added:</p> <pre><code>{\n  \"$kind\": \"EntityType\",\n  \"$Key\": [\"ID\", \"IsActiveEntity\"],\n  \"OrderNo\": {\n    \"$kind\": \"Property\",\n    \"$Type\": \"Edm.String\",\n    \"$MaxLength\": 22\n  },\n  \"Items\": {\n    \"$kind\": \"NavigationProperty\",\n    \"$isCollection\": true,\n    \"$Type\": \"OrdersService.OrderItems\",\n    \"$Partner\": \"order\",\n    \"$OnDelete\": \"Cascade\"\n  },\n  \"Shipping\": {\n    \"$kind\": \"NavigationProperty\",\n    \"$isCollection\": true,\n    \"$Type\": \"OrdersService.ShippingDetails\",\n    \"$Partner\": \"order\",\n    \"$OnDelete\": \"Cascade\"\n  },\n  \"buyer\": {\n    \"$kind\": \"Property\",\n    \"$Type\": \"Edm.String\",\n    \"$MaxLength\": 255\n  }\n}\n</code></pre> <p>This is the root entity after navigation properties for <code>Items</code> (here <code>Infos</code> under <code>Items</code>) and <code>Shipping</code> were added:</p> <pre><code>{\n  \"$kind\": \"EntityType\",\n  \"$Key\": [\"ID\", \"IsActiveEntity\"],\n  \"ID\": {\n    \"$kind\": \"Property\",\n    \"$Type\": \"Edm.Guid\",\n    \"$Nullable\": false\n  },\n  \"OrderNo\": {\n    \"$kind\": \"Property\",\n    \"$Type\": \"Edm.String\",\n    \"$MaxLength\": 22\n  },\n  \"Items\": {\n    \"$kind\": \"NavigationProperty\",\n    \"$isCollection\": true,\n    \"$Type\": \"OrdersService.OrderItems\",\n    \"$Partner\": \"order\",\n    \"$OnDelete\": \"Cascade\",\n    \"$XYZEntity\": {\n      \"$kind\": \"EntityType\",\n      \"$Key\": [\"ID\", \"IsActiveEntity\"],\n      \"ID\": {\n        \"$kind\": \"Property\",\n        \"$Type\": \"Edm.Guid\",\n        \"$Nullable\": false\n      },\n      \"order\": {\n        \"$kind\": \"NavigationProperty\",\n        \"$Type\": \"OrdersService.Orders\",\n        \"$Partner\": \"Items\",\n        \"$ReferentialConstraint\": {\n          \"order_ID\": \"ID\"\n        }\n      },\n      \"order_ID\": {\n        \"$kind\": \"Property\",\n        \"$Type\": \"Edm.Guid\"\n      },\n      \"product_ID\": {\n        \"$kind\": \"Property\",\n        \"$Type\": \"Edm.String\"\n      },\n      \"Infos\": {\n        \"$kind\": \"NavigationProperty\",\n        \"$isCollection\": true,\n        \"$Type\": \"OrdersService.OrderItemsInfo\",\n        \"$Partner\": \"orderItem\",\n        \"$OnDelete\": \"Cascade\",\n        \"$XYZEntity\": {\n          \"$kind\": \"EntityType\",\n          \"$Key\": [\"ID\", \"IsActiveEntity\"],\n          \"ID\": {\n            \"$kind\": \"Property\",\n            \"$Type\": \"Edm.Guid\",\n            \"$Nullable\": false\n          },\n          \"orderItem\": {\n            \"$kind\": \"NavigationProperty\",\n            \"$Type\": \"OrdersService.OrderItems\",\n            \"$Partner\": \"Infos\",\n            \"$ReferentialConstraint\": {\n              \"orderItem_ID\": \"ID\"\n            }\n          },\n          \"orderItem_ID\": {\n            \"$kind\": \"Property\",\n            \"$Type\": \"Edm.Guid\"\n          },\n          \"comment\": {\n            \"$kind\": \"Property\",\n            \"$Type\": \"Edm.String\"\n          }\n        },\n        \"$XYZFetchableEntity\": true\n      },\n      \"quantity\": {\n        \"$kind\": \"Property\",\n        \"$Type\": \"Edm.Int32\"\n      }\n    },\n    \"$XYZFetchableEntity\": true\n  },\n  \"Shipping\": {\n    \"$kind\": \"NavigationProperty\",\n    \"$isCollection\": true,\n    \"$Type\": \"OrdersService.ShippingDetails\",\n    \"$Partner\": \"order\",\n    \"$OnDelete\": \"Cascade\",\n    \"$XYZEntity\": {\n      \"$kind\": \"EntityType\",\n      \"$Key\": [\"ID\", \"IsActiveEntity\"],\n      \"ID\": {\n        \"$kind\": \"Property\",\n        \"$Type\": \"Edm.Guid\",\n        \"$Nullable\": false\n      },\n      \"order\": {\n        \"$kind\": \"NavigationProperty\",\n        \"$Type\": \"OrdersService.Orders\",\n        \"$Partner\": \"Shipping\",\n        \"$ReferentialConstraint\": {\n          \"order_ID\": \"ID\"\n        }\n      },\n      \"order_ID\": {\n        \"$kind\": \"Property\",\n        \"$Type\": \"Edm.Guid\"\n      }\n    },\n    \"$XYZFetchableEntity\": true\n  },\n  \"buyer\": {\n    \"$kind\": \"Property\",\n    \"$Type\": \"Edm.String\",\n    \"$MaxLength\": 255\n  }\n}\n</code></pre> <p>With this metadata model, it is much easier to fetch data and have an overview of all the entities related to the root entity.</p>"},{"location":"pages/Development/SpreadsheetDownload/#expands","title":"Expands","text":"<p>The method <code>_getExpandsRecursive</code> is called to traverse the metadata model and create a list of expands for the OData binding, which is created in <code>getBindingFromBinding</code> in <code>ODataV4.ts</code>. The expands are used to fetch related entities in one request.</p>"},{"location":"pages/Development/SpreadsheetDownload/#binding","title":"Binding","text":"<p>With the binding from the root entity, a custom binding is created with the expands in <code>getBindingFromBinding</code> in <code>ODataV4.ts</code> to fetch the data.</p>"},{"location":"pages/Development/SpreadsheetDownload/#fetchbatch","title":"fetchBatch","text":"<p>The method <code>fetchBatch</code> in <code>ODataV4.ts</code> is used to fetch the data in batches of 1000. This is done to prevent the OData V4 backend from timing out. The data is requested with <code>requestContexts</code> from the binding, and the results are of type <code>sap.ui.model.odata.v4.Context[]</code> and returned in the variable <code>totalResults</code>.</p>"},{"location":"pages/Development/SpreadsheetDownload/#extractobjects-method","title":"extractObjects Method","text":"<p>The <code>extractObjects</code> method is used to process the fetched data and prepare it for spreadsheet generation.</p>"},{"location":"pages/Development/SpreadsheetDownload/#spreadsheet-generation","title":"Spreadsheet Generation","text":"<p>The <code>SpreadsheetGenerator</code> class handles the creation of the spreadsheet file. It uses the fetched data to generate sheets for each entity and its related entities, ensuring that all necessary data is included in the final output.</p>"},{"location":"pages/Development/Update/","title":"Update","text":"<p>Only V4 is supported for now.</p>"},{"location":"pages/Development/Update/#odata-v4","title":"OData V4","text":"<p>The problem with Draft is that when updating lot of objects, the update will fail if one of the objects is not found because of the draft status. Draft status will determined with <code>IsActiveEntity</code> property. To make it as seamless as possible, the process will try to find every object with <code>IsActiveEntity=true</code>. This does not find objects that dont have a active entity (draft but not yet created). The finding of the object result in a get request to the OData service for each row. After that the process knows the state of the object and can update it. So if on the object <code>HasDraftEntity</code> is true or <code>IsActiveEntity</code> is false, the process will create a new context with <code>IsActiveEntity=false</code> and use the draft entity automatically to update the object.</p>"},{"location":"pages/Development/Update/#technical-details","title":"Technical Details","text":"<p>To get the all the objects that are imported from the spreadsheet, the process will create a new empty list binding with a filter of all the keys from the spreadsheet. Technically is has to query for <code>IsActiveEntity=true</code> and <code>IsActiveEntity=false</code> and combine the results. This will result in two get requests to the OData service for each row combined in two batch request for each batch. If a row is not found it is just not included in the List Binding. So the process will not fail if a row is not found and can match which objects are not found from the List Binding. If a object was not found the user can then decide to continue with the found objects or to cancel the process. Each context will then be used to update the object with <code>setProperty</code>.</p>"},{"location":"pages/Development/Update/#different-states-in-export","title":"Different States in Export","text":"<p>For the export the process determines the state of the object by checking the <code>IsActiveEntity</code> and <code>HasDraftEntity</code> properties.</p>"},{"location":"pages/Development/Update/#list-report","title":"List Report","text":"<ul> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=false</code> -&gt; <code>IsActiveEntity</code> column is set to true</li> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=true</code> -&gt; <code>IsActiveEntity</code> column is set to false</li> </ul>"},{"location":"pages/Development/Update/#object-page","title":"Object Page","text":"<ul> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=false</code> -&gt; <code>IsActiveEntity</code> column is set to true</li> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=true</code> -&gt; <code>IsActiveEntity</code> column is set to false</li> </ul>"},{"location":"pages/Development/Update/#different-states-in-upload","title":"Different States in Upload","text":""},{"location":"pages/Development/Update/#list-report_1","title":"List Report","text":"<ul> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=false</code> -&gt; update the object (expecting <code>IsActiveEntity=true</code> in the spreadsheet import)</li> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=true</code> -&gt; create a new context with <code>IsActiveEntity=false</code> and use the draft entity automatically to update the object (expecting <code>IsActiveEntity=false</code> in the spreadsheet import)</li> </ul>"},{"location":"pages/Development/Update/#table-in-object-page","title":"Table in Object Page","text":""},{"location":"pages/Development/Update/#not-in-edit-mode","title":"Not in Edit Mode","text":"<ul> <li><code>IsActiveEntity=true</code> and <code>HasDraftEntity=false</code> and <code>HasActiveEntity=false</code> -&gt; update the object (expecting <code>IsActiveEntity=true</code> in the spreadsheet import)</li> </ul>"},{"location":"pages/Development/Update/#in-edit-mode","title":"In Edit Mode","text":"<ul> <li><code>IsActiveEntity=false</code> and <code>HasDraftEntity=false</code> and <code>HasActiveEntity=true</code> -&gt; update the object (expecting <code>IsActiveEntity=false</code> in the spreadsheet import)</li> </ul>"},{"location":"pages/Development/opa5/","title":"OPA5 Tests","text":"<p>OPA5 Tests are used here to check the more unit-like functionality of the app.</p>"},{"location":"pages/Development/opa5/#setup","title":"Setup","text":"<p>The ui5-test-runner by Arnaud Buchholz is installed and run from the <code>examples</code> folder. Tests are currently only in OData V4 FE Example.</p>"},{"location":"pages/Development/opa5/#configuration","title":"Configuration","text":"<p>There is no config file. With the ui5-test-runner, only the <code>opaTests.qunit.html</code> is called.</p>"},{"location":"pages/Development/opa5/#run-tests","title":"Run tests","text":"<p>You can run the tests for OData V4 and UI5 Version 108 in the root folder with:</p> <pre><code>npm run start:v4fe:108\nnpm run test:opa:v4fe:108\n</code></pre> <p>which will run <code>npm run ui5-test-runner --workspace=ui5-cc-spreadsheetimporter-sample --url http://localhost:8080/test/integration/opaTests.qunit.html</code>. All information about the run is in the folder <code>./examples/report</code>. So you can run all the other versions like 96 and 84 with the right port.</p>"},{"location":"pages/Development/opa5/#github-actions","title":"GitHub Actions","text":"<p>The GitHub Action Workflow will run on every Pull Request push, testing the V4 Versions and is written down in <code>opa5-test.yml</code>.</p> <p>More info at GitHub Actions</p>"},{"location":"pages/Development/wdi5/","title":"wdi5 Tests","text":"<p>The UI5 Custom Control Spreadsheet Upload is used in many different scenarios. To ensure that changes do not affect the function, the basic function and a few other additional functions are tested with wdi5 tests.</p> <p>The overview of which scenarios are covered by wdi5 tests can be found here: wdi5 tests</p>"},{"location":"pages/Development/wdi5/#setup","title":"Setup","text":"<p>wdi5 is used in the test setup in the <code>examples</code> folder in the <code>test</code> folder. As npm workspaces is used, with <code>npm install --legacy-peer-deps</code>, all the packages, including <code>wdio-ui5-service</code>, are installed.</p>"},{"location":"pages/Development/wdi5/#configuration","title":"Configuration","text":"<p>The basic config file is the <code>wdio-base.conf.js</code> file. To avoid having to create a separate configuration file for each scenario, logic is integrated into the file so that the appropriate variables are automatically drawn, for example the port or the appropriate spec files. The data for this is stored in the <code>testapps.json</code> file.</p>"},{"location":"pages/Development/wdi5/#run-tests","title":"Run tests","text":"<p>You can run the tests for OData V2 and V4 UI5 Version 108 in the root folder with:</p> <pre><code>npm run test:v4fe:108\nnpm run test:v2fe:108\n</code></pre> <p>which will run <code>npm run test --workspace=ui5-cc-spreadsheetimporter-sample -- -- ordersv4fe 108</code>. So, you can run all the other apps like</p> <pre><code>npm run test --workspace=ui5-cc-spreadsheetimporter-sample -- -- ordersv4fe 84\n</code></pre>"},{"location":"pages/Development/wdi5/#run-single-spec","title":"Run single spec","text":"<p>You can also run single test specs. You need to go to the <code>examples</code> folder for this. For example, you can run the test spec <code>OpenSpreadsheetUploadDialog</code> with OData V2 FE UI5 Version 96 with:</p> <pre><code>npm run test -- ordersv2fe  96 --spec OpenSpreadsheetUploadDialog\n</code></pre>"},{"location":"pages/Development/wdi5/#run-headless","title":"Run headless","text":"<p>The wdi5 tests in GitHub Actions must run headless, which is also possible to call locally with:</p> <pre><code>npm run test --workspace=ui5-cc-spreadsheetimporter-sample -- -- --headless ordersv4fe 84\n</code></pre>"},{"location":"pages/Development/wdi5/#github-actions","title":"GitHub Actions","text":"<p>As specified in the <code>testapps.json</code> file, the GitHub Action Workflow will run on every Pull Request push, testing scenarios with all current UI5 Maintenance Versions and is written in <code>wdi5-test.yml</code>.</p> <p>More info at GitHub Actions</p>"},{"location":"pages/Pro/deepcreate/","title":"Deepcreate","text":"<p>With this feature, you are able to upload a spreadsheet to create multiple entities and their relations.</p>"},{"location":"pages/Pro/deepcreate/#configuration","title":"Configuration","text":"Option Description Details <code>operation</code> Choose which method to use for uploading data string <code>flatSheet</code> Upload data in one sheet or multiple sheets object <code>columns</code> Choose which data to upload object"},{"location":"pages/Pro/deepcreate/#sample-usage","title":"Sample Usage","text":"<pre><code>componentData: {\n    context: this,\n    pro: {\n        operation: \"deepCreate\",\n        deepCreateConfig:{\n            flatSheet:false,\n            columns : {\n                \"OrderNo\":{\n                    \"order\": 1,\n                    \"data\": \"\"\n                },\n                \"buyer\": {\n                    \"order\": 3,\n                    \"data\": \"\"\n                },\n                \"Items\": {\n                    \"quantity\" : {\n                        \"order\": 2,\n                        \"data\": \"\"\n                    },\n                    \"title\": {\n                        \"order\": 4,\n                        \"data\": \"\"\n                    }\n                },\n                \"Shipping\": {\n                    \"address\" : {\n                        \"order\": 5,\n                        \"data\": \"\"\n                    },\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pages/Pro/deepcreate/#operation","title":"operation","text":"<p>default: <code>create</code></p> <p>Currently available options: <code>create</code>, <code>deepCreate</code></p> <p>This option defines the method to use for uploading data.</p>"},{"location":"pages/Pro/deepcreate/#flatsheet","title":"flatSheet","text":"<p>default: <code>false</code></p> <p>This option determines whether you want to upload data in one sheet or multiple sheets. By default, every entity is in a separate sheet. If you want to upload data in one sheet, set this option to <code>true</code>.</p>"},{"location":"pages/Pro/deepcreate/#columns","title":"columns","text":"<p>This option determines which data to upload.</p>"},{"location":"pages/Pro/install/","title":"Installing npm Package from GitHub","text":"<p>To install the <code>@spreadsheetimporter/ui5-cc-spreadsheetimporter-pro</code> package directly from a GitHub repository, you'll need a personal access token from GitHub and configure npm to use it. Below are the steps:</p>"},{"location":"pages/Pro/install/#1-be-a-member-of-the-github-organization","title":"1. Be a member of the GitHub organization ``","text":"<ol> <li>After purchasing the Spreadsheet Importer package, you'll receive an invitation to join the GitHub organization.</li> <li>If you did not receive an invitation, please contact us at marian@marianzeis.de.</li> </ol>"},{"location":"pages/Pro/install/#2-generating-a-personal-access-token-on-github","title":"2. Generating a Personal Access Token on GitHub","text":"<ol> <li>Navigate to GitHub and log in.</li> <li>Click on your profile picture (top right) and choose Settings.</li> <li>In the left sidebar, click on Developer settings.</li> <li>Choose Personal access tokens from the left sidebar.</li> <li>Click Generate new token.</li> <li>Provide a descriptive name for the token in the Note field.</li> <li>Under scopes, select the <code>repo</code> and <code>read:packages</code> checkboxes to allow access to private repositories and packages.</li> <li>Click Generate token.</li> <li>Copy the generated token. Note: This is your only chance to copy the token. If lost, you'll have to create a new one.</li> </ol>"},{"location":"pages/Pro/install/#3-configuring-npm-with-npmrc","title":"3. Configuring npm with <code>.npmrc</code>","text":"<p>More Information: Configuring npm for use with GitHub Packages</p> <p>You can either set up a project-specific <code>.npmrc</code> file or edit the global <code>~/.npmrc</code>.</p>"},{"location":"pages/Pro/install/#for-project-specific-configuration","title":"For Project-specific Configuration","text":"<ol> <li>Go to your project directory.</li> <li>Create or open the <code>.npmrc</code> file.</li> </ol> <pre><code>@spreadsheetimporter:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=YOUR_PERSONAL_ACCESS_TOKEN\n</code></pre> <p>Replace YOUR_PERSONAL_ACCESS_TOKEN with the token you generated in step 2.</p> <p>Now you can install the package:</p> <pre><code>npm install @spreadsheetimporter/ui5-cc-spreadsheetimporter-pro\n</code></pre>"},{"location":"pages/Pro/install/#for-global-configuration","title":"For Global Configuration","text":"<ol> <li>Open the <code>~/.npmrc</code> file.</li> <li>Add the following line:</li> </ol> <pre><code>@spreadsheetimporter:registry=https://npm.pkg.github.com\n</code></pre> <ol> <li>Save the file.</li> </ol> <p>Now you can install the package:</p> <pre><code>npm install @spreadsheetimporter/ui5-cc-spreadsheetimporter-pro\n</code></pre>"},{"location":"pages/Pro/install/#4-using-the-package","title":"4. Using the Package","text":"<p>Now you can start using the package in your project. For more information, please refer to the Getting Started Page.</p> <p>The documentation for pro features is here:</p> <ul> <li>Spreadsheet Download</li> </ul>"}]}